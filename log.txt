2025-06-07T21:41:25.192+07:00  INFO 5348 --- [nio-8080-exec-2] c.g.a.service.impl.ShopAIServiceImpl     : Full AI response extracted address: 70 nguyễn huệ, thanh phố huế
2025-06-07T21:41:25.192+07:00  INFO 5348 --- [nio-8080-exec-2] c.g.a.service.impl.ShopAIServiceImpl     : Full AI response extracted phone: 0327538428
2025-06-07T21:41:25.192+07:00  INFO 5348 --- [nio-8080-exec-2] c.g.a.service.impl.ShopAIServiceImpl     : Creating order from AI - Customer: 97, Product: 3, Quantity: 10
Hibernate: insert into orders (created_at,id_customer,delivery_unit,note,id_product,quantity,status) values (?,?,?,?,?,?,?)
Hibernate: update products set active=?,category=?,created_at=?,description=?,image_base64=?,name=?,price=?,shop_id=?,stock=?,updated_at=? where id=?
2025-06-07T21:41:25.282+07:00  INFO 5348 --- [nio-8080-exec-2] c.g.a.service.impl.ShopAIServiceImpl     : Successfully created order with ID: 78 from AI
2025-06-07T21:41:25.283+07:00  INFO 5348 --- [nio-8080-exec-2] c.g.a.service.impl.ShopAIServiceImpl     : Created order from full AI address response with PLACEORDER action: Product ID: 3, Quantity: 10
Hibernate: select fat1_0.id,fat1_0.access_token,fat1_0.is_active,fat1_0.created_at,fat1_0.page_id,fat1_0.shop_id,fat1_0.updated_at,fat1_0.verify_token,fat1_0.webhook_url from facebook_access_tokens fat1_0 where fat1_0.shop_id=? and fat1_0.is_active=?
2025-06-07T21:41:25.289+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : HTTP POST https://graph.facebook.com/v18.0/me/messages?access_token=EAAbRsLPbdZBgBO9ZA2HKFDeNRhPIvOWawKgNklNKqYd3RqLgDSsDpP9X5sQOSZAKlvgLZBJ0hCTOeya4N3Kx7mi2BBQVtcmDV5ylAMxFEAEVmdnXTqvOZBCjK3uGrznebWZBwqthmDE6NQZBRw9ZBS8ItYzVyvYOWmk62sgipDO3JNc2XZAPqZAt6UOCBkw1PufZAm1BTjwskTA
2025-06-07T21:41:25.290+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Accept=[text/plain, application/json, application/*+json, */*]
2025-06-07T21:41:25.290+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Writing [{recipient={id=29779345331713148}, message={text=Dạ vâng, em đã nhận được địa chỉ giao hàng là 70 Nguyễn Huệ, thành phố Huế và số điện thoại 0327538428. Em đang tiến hành lên đơn 10 chai Coca-Cola giao đến địa chỉ này cho mình nhé.}}] as "application/json"
2025-06-07T21:41:26.011+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Response 200 OK
2025-06-07T21:41:26.011+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as "application/json"
2025-06-07T21:41:26.011+07:00  INFO 5348 --- [nio-8080-exec-2] c.g.a.s.impl.FacebookBotServiceImpl      : AI detected intent for Shop 7, User 29779345331713148: ADDRESS_RESPONSE
2025-06-07T21:41:26.011+07:00  INFO 5348 --- [nio-8080-exec-2] c.g.a.s.impl.FacebookBotServiceImpl      : AI indicates action required for Shop 7, User 29779345331713148
Hibernate: select c1_0.id_customer,c1_0.address,c1_0.created_at,c1_0.email,c1_0.fullname,c1_0.phone,c1_0.id_shop from customers c1_0 left join shops s1_0 on s1_0.id=c1_0.id_shop where c1_0.email=? and s1_0.id=?
2025-06-07T21:41:26.016+07:00  WARN 5348 --- [nio-8080-exec-2] c.g.a.s.impl.FacebookBotServiceImpl      : Customer not found for Facebook user 29779345331713148 in shop 7. Creating new customer.
Hibernate: select fat1_0.id,fat1_0.access_token,fat1_0.is_active,fat1_0.created_at,fat1_0.page_id,fat1_0.shop_id,fat1_0.updated_at,fat1_0.verify_token,fat1_0.webhook_url from facebook_access_tokens fat1_0 where fat1_0.shop_id=? and fat1_0.is_active=?
2025-06-07T21:41:26.023+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : HTTP GET https://graph.facebook.com/v18.0/29779345331713148?fields=first_name,last_name&access_token=EAAbRsLPbdZBgBO9ZA2HKFDeNRhPIvOWawKgNklNKqYd3RqLgDSsDpP9X5sQOSZAKlvgLZBJ0hCTOeya4N3Kx7mi2BBQVtcmDV5ylAMxFEAEVmdnXTqvOZBCjK3uGrznebWZBwqthmDE6NQZBRw9ZBS8ItYzVyvYOWmk62sgipDO3JNc2XZAPqZAt6UOCBkw1PufZAm1BTjwskTA
2025-06-07T21:41:26.023+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Accept=[text/plain, application/json, application/*+json, */*]
2025-06-07T21:41:26.716+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Response 200 OK
2025-06-07T21:41:26.716+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as "application/json"
2025-06-07T21:41:26.716+07:00  INFO 5348 --- [nio-8080-exec-2] c.g.a.s.impl.FacebookBotServiceImpl      : Retrieved Facebook user name: Nhật Thanh for user ID: 29779345331713148
Hibernate: insert into customers (address,created_at,email,fullname,phone,id_shop) values (?,?,?,?,?,?)
2025-06-07T21:41:26.722+07:00  INFO 5348 --- [nio-8080-exec-2] c.g.a.s.impl.FacebookBotServiceImpl      : Created new customer for Facebook user: 29779345331713148
Hibernate: select c1_0.id_customer,c1_0.address,c1_0.created_at,c1_0.email,c1_0.fullname,c1_0.phone,c1_0.id_shop from customers c1_0 left join shops s1_0 on s1_0.id=c1_0.id_shop where c1_0.email=? and s1_0.id=?
Hibernate: insert into customers (address,created_at,email,fullname,phone,id_shop) values (?,?,?,?,?,?)
2025-06-07T21:41:26.731+07:00 DEBUG 5348 --- [nio-8080-exec-2] c.g.a.service.impl.ShopAIServiceImpl     : Sending intent analysis request to Gemini API: {"contents":[{"parts":[{"text":"Recent conversation history:\nCustomer: product 3\n\nYou are a shop assistant. Analyze this customer message in context of any previous conversation: \"product 3\"\n\nDetermine the intent and whether shop product context is needed to properly respond.\n\nIMPORTANT: Standard action codes to use:\n- GREETING: Simple greeting or welcome message\n- GETPRODUCT: Get detailed information about a specific product\n- SEARCHPRODUCT: Search for products matching keywords\n- ADDTOCART: Add a product to the customer's cart\n- PLACEORDER: Complete the order process (when missing address)\n- COMPLETE_ORDER: Complete order with all info including address\n- ADDRESS_UPDATE: Update customer address and complete pending orders\n- CHECKORDER: Check order status\n- CANCELORDER: Cancel an existing order\n- SENDIMAGE: Send product images directly to customer\n- SHOWPRODUCT: Show product details with image\n- CONVERSATION_REFERENCE: Customer is asking about previous conversation\n- ADDRESS_RESPONSE: Customer is providing their address in response to a request\n- GENERAL_QUERY: General question not fitting other categories\n\nIMPORTANT CANCELORDER DETECTION GUIDELINES:\n1. Use CANCELORDER intent when messages include phrases like:\n   - 'hủy đơn hàng', 'hủy đơn', 'không mua nữa'\n   - 'huỷ giao dịch', 'không đặt hàng nữa', 'không muốn mua nữa'\n   - 'cancel order', 'cancel my order', 'don't want to buy anymore'\n2. If the customer mentions a specific order ID ('đơn hàng số X', 'mã đơn hàng X'):\n   - Include the 'order_id' field with the exact order number\n3. If no order ID is mentioned, do NOT include the 'order_id' field\n4. Set action_required: true for all cancellation requests\n5. Always provide a clear confirmation in response_text\n\nIMPORTANT CHECKORDER DETECTION GUIDELINES:\n1. Use CHECKORDER intent when messages include phrases like:\n   - 'check tình trạng đơn hàng', 'kiểm tra đơn hàng', 'xem đơn hàng'\n   - 'đơn hàng của tôi thế nào', 'order status', 'check my order'\n   - 'tình trạng giao hàng', 'đơn hàng đến đâu rồi'\n2. CRITICAL: Always extract order ID when mentioned:\n   - '#61', 'đơn hàng #61' -> order_id: '61'\n   - 'đơn hàng số 25', 'mã đơn 25' -> order_id: '25'\n   - 'order 123', '#123' -> order_id: '123'\n3. Include action_details with:\n   - action_type: 'CHECKORDER'\n   - order_id: The extracted order number (if mentioned)\n4. Set action_required: true for all order checking requests\n5. If no order ID is mentioned, omit the order_id field\n\nIMPORTANT ADDRESS_RESPONSE GUIDELINES:\n1. When customer is providing ONLY an address after you requested it:\n   - Set detected_intent: 'ADDRESS_RESPONSE'\n   - Set action_required: true\n   - Set create_order: true if this address is for an order\n   - Include extracted_address with the full address\n   - CRITICAL: If this address is for an order and you previously asked for it, ALWAYS include action_details with:\n     * action_type: 'PLACEORDER'\n     * product_id: Extract from previous conversation (find the product the customer wanted to buy)\n     * quantity: Extract from previous conversation (find the quantity the customer wanted)\n2. Look through the conversation history to find what product and quantity the customer wanted to order\n3. Examples of address-only responses:\n   - 'Địa chỉ của tôi là 123 Đường ABC'\n   - 'Giao đến 72 Hương An, Huế nhé'\n   - 'Nhà mình ở số 45 đường Trần Hưng Đạo'\n\nIMPORTANT: When customer asks about product images or product details, always prefer to use:\nIMPORTANT: When customer asks about product images or product details, always prefer to use:\n- SENDIMAGE: For sending multiple product images directly\n- SHOWPRODUCT: For showing detailed product information with image\n\nIMPORTANT: When customer asks about previous messages or what they asked before, use CONVERSATION_REFERENCE\n\nIMPORTANT: Always look for and extract delivery information when customer may provide it:\n1. Look for addresses: Any text related to addresses, delivery locations, house numbers, streets, etc.\n2. Look for phone numbers: Vietnamese phone numbers in formats like 0912345678, +84912345678, etc.\n3. Include the extracted information in extracted_address and extracted_phone fields.\n\nIMPORTANT: Keep your response_text short, natural, conversational, and human-like. Always respond in Vietnamese unless the customer uses English. Act like a friendly shop assistant, not an AI. Use casual language with appropriate Vietnamese expressions. For simple greetings like 'hello', 'hi', etc., just respond with a friendly greeting. Avoid lengthy, formal responses.\n\n"}]}],"generationConfig":{"response_mime_type":"application/json","temperature":0.3,"response_schema":{"type":"OBJECT","required":["response_text","detected_intent","needs_shop_context"],"properties":{"response_text":{"type":"STRING"},"detected_intent":{"type":"STRING","enum":["GREETING","GETPRODUCT","SEARCHPRODUCT","ADDTOCART","PLACEORDER","CHECKORDER","CANCELORDER","SENDIMAGE","SHOWPRODUCT","CONVERSATION_REFERENCE","ADDRESS_RESPONSE","GENERAL_QUERY"]},"needs_shop_context":{"type":"BOOLEAN"},"action_required":{"type":"BOOLEAN"},"extracted_address":{"type":"STRING","description":"Address extracted from the customer message, if any"},"extracted_phone":{"type":"STRING","description":"Phone number extracted from the customer message, if any"},"follow_up_questions":{"type":"ARRAY","description":"Suggested follow-up questions to maintain conversation flow","items":{"type":"STRING"}}}}}}
2025-06-07T21:41:26.731+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : HTTP POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-04-17:generateContent?key=AIzaSyB1EYnFlDSgFhqv3Kk4FDv1ukZvl4H7wBY
2025-06-07T21:41:26.732+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Accept=[text/plain, application/json, application/*+json, */*]
2025-06-07T21:41:26.732+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Writing [{"contents":[{"parts":[{"text":"Recent conversation history:\nCustomer: product 3\n\nYou are a shop assistant. Analyze this customer message in context of any previous conversation: \"product 3\"\n\nDetermine the intent and whether shop product context is needed to properly respond.\n\nIMPORTANT: Standard action codes to use:\n- GREETING: Simple greeting or welcome message\n- GETPRODUCT: Get detailed information about a specific product\n- SEARCHPRODUCT: Search for products matching keywords\n- ADDTOCART: Add a product to the customer's cart\n- PLACEORDER: Complete the order process (when missing address)\n- COMPLETE_ORDER: Complete order with all info including address\n- ADDRESS_UPDATE: Update customer address and complete pending orders\n- CHECKORDER: Check order status\n- CANCELORDER: Cancel an existing order\n- SENDIMAGE: Send product images directly to customer\n- SHOWPRODUCT: Show product details with image\n- CONVERSATION_REFERENCE: Customer is asking about previous conversation\n- ADDRESS_RESPONSE: Customer is providing their address in response to a request\n- GENERAL_QUERY: General question not fitting other categories\n\nIMPORTANT CANCELORDER DETECTION GUIDELINES:\n1. Use CANCELORDER intent when messages include phrases like:\n   - 'hủy đơn hàng', 'hủy đơn', 'không mua nữa'\n   - 'huỷ giao dịch', 'không đặt hàng nữa', 'không muốn mua nữa'\n   - 'cancel order', 'cancel my order', 'don't want to buy anymore'\n2. If the customer mentions a specific order ID ('đơn hàng số X', 'mã đơn hàng X'):\n   - Include the 'order_id' field with the exact order number\n3. If no order ID is mentioned, do NOT include the 'order_id' field\n4. Set action_required: true for all cancellation requests\n5. Always provide a clear confirmation in response_text\n\nIMPORTANT CHECKORDER DETECTION GUIDELINES:\n1. Use CHECKORDER intent when messages include phrases like:\n   - 'check tình trạng đơn hàng', 'kiểm tra đơn hàng', 'xem đơn hàng'\n   - 'đơn hàng của tôi thế nào', 'order status', 'check my order'\n   - 'tình trạng giao hàng', 'đơn hàng đến đâu rồi'\n2. CRITICAL: Always extract order ID when mentioned:\n   - '#61', 'đơn hàng #61' -> order_id: '61'\n   - 'đơn hàng số 25', 'mã đơn 25' -> order_id: '25'\n   - 'order 123', '#123' -> order_id: '123'\n3. Include action_details with:\n   - action_type: 'CHECKORDER'\n   - order_id: The extracted order number (if mentioned)\n4. Set action_required: true for all order checking requests\n5. If no order ID is mentioned, omit the order_id field\n\nIMPORTANT ADDRESS_RESPONSE GUIDELINES:\n1. When customer is providing ONLY an address after you requested it:\n   - Set detected_intent: 'ADDRESS_RESPONSE'\n   - Set action_required: true\n   - Set create_order: true if this address is for an order\n   - Include extracted_address with the full address\n   - CRITICAL: If this address is for an order and you previously asked for it, ALWAYS include action_details with:\n     * action_type: 'PLACEORDER'\n     * product_id: Extract from previous conversation (find the product the customer wanted to buy)\n     * quantity: Extract from previous conversation (find the quantity the customer wanted)\n2. Look through the conversation history to find what product and quantity the customer wanted to order\n3. Examples of address-only responses:\n   - 'Địa chỉ của tôi là 123 Đường ABC'\n   - 'Giao đến 72 Hương An, Huế nhé'\n   - 'Nhà mình ở số 45 đường Trần Hưng Đạo'\n\nIMPORTANT: When customer asks about product images or product details, always prefer to use:\nIMPORTANT: When customer asks about product images or product details, always prefer to use:\n- SENDIMAGE: For sending multiple product images directly\n- SHOWPRODUCT: For showing detailed product information with image\n\nIMPORTANT: When customer asks about previous messages or what they asked before, use CONVERSATION_REFERENCE\n\nIMPORTANT: Always look for and extract delivery information when customer may provide it:\n1. Look for addresses: Any text related to addresses, delivery locations, house numbers, streets, etc.\n2. Look for phone numbers: Vietnamese phone numbers in formats like 0912345678, +84912345678, etc.\n3. Include the extracted information in extracted_address and extracted_phone fields.\n\nIMPORTANT: Keep your response_text short, natural, conversational, and human-like. Always respond in Vietnamese unless the customer uses English. Act like a friendly shop assistant, not an AI. Use casual language with appropriate Vietnamese expressions. For simple greetings like 'hello', 'hi', etc., just respond with a friendly greeting. Avoid lengthy, formal responses.\n\n"}]}],"generationConfig":{"response_mime_type":"application/json","temperature":0.3,"response_schema":{"type":"OBJECT","required":["response_text","detected_intent","needs_shop_context"],"properties":{"response_text":{"type":"STRING"},"detected_intent":{"type":"STRING","enum":["GREETING","GETPRODUCT","SEARCHPRODUCT","ADDTOCART","PLACEORDER","CHECKORDER","CANCELORDER","SENDIMAGE","SHOWPRODUCT","CONVERSATION_REFERENCE","ADDRESS_RESPONSE","GENERAL_QUERY"]},"needs_shop_context":{"type":"BOOLEAN"},"action_required":{"type":"BOOLEAN"},"extracted_address":{"type":"STRING","description":"Address extracted from the customer message, if any"},"extracted_phone":{"type":"STRING","description":"Phone number extracted from the customer message, if any"},"follow_up_questions":{"type":"ARRAY","description":"Suggested follow-up questions to maintain conversation flow","items":{"type":"STRING"}}}}}}] as "application/json"
2025-06-07T21:41:26.863+07:00  INFO 5348 --- [nio-8080-exec-3] c.g.a.s.impl.FacebookBotServiceImpl      : Received Facebook message from 29779345331713148: bạn lên đơn sớm giúp mình nhé
Hibernate: select fat1_0.id,fat1_0.access_token,fat1_0.is_active,fat1_0.created_at,fat1_0.page_id,fat1_0.shop_id,fat1_0.updated_at,fat1_0.verify_token,fat1_0.webhook_url from facebook_access_tokens fat1_0
Hibernate: select fat1_0.id,fat1_0.access_token,fat1_0.is_active,fat1_0.created_at,fat1_0.page_id,fat1_0.shop_id,fat1_0.updated_at,fat1_0.verify_token,fat1_0.webhook_url from facebook_access_tokens fat1_0 where fat1_0.shop_id=? and fat1_0.is_active=?
2025-06-07T21:41:26.873+07:00 DEBUG 5348 --- [nio-8080-exec-3] o.s.web.client.RestTemplate              : HTTP GET https://graph.facebook.com/v18.0/29779345331713148?fields=first_name,last_name&access_token=EAAbRsLPbdZBgBO9ZA2HKFDeNRhPIvOWawKgNklNKqYd3RqLgDSsDpP9X5sQOSZAKlvgLZBJ0hCTOeya4N3Kx7mi2BBQVtcmDV5ylAMxFEAEVmdnXTqvOZBCjK3uGrznebWZBwqthmDE6NQZBRw9ZBS8ItYzVyvYOWmk62sgipDO3JNc2XZAPqZAt6UOCBkw1PufZAm1BTjwskTA
2025-06-07T21:41:26.874+07:00 DEBUG 5348 --- [nio-8080-exec-3] o.s.web.client.RestTemplate              : Accept=[text/plain, application/json, application/*+json, */*]
2025-06-07T21:41:27.216+07:00 DEBUG 5348 --- [nio-8080-exec-3] o.s.web.client.RestTemplate              : Response 200 OK
2025-06-07T21:41:27.216+07:00 DEBUG 5348 --- [nio-8080-exec-3] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as "application/json"
2025-06-07T21:41:27.216+07:00  INFO 5348 --- [nio-8080-exec-3] c.g.a.s.impl.FacebookBotServiceImpl      : Retrieved Facebook user name: Nhật Thanh for user ID: 29779345331713148
Hibernate: select c1_0.id_customer,c1_0.address,c1_0.created_at,c1_0.email,c1_0.fullname,c1_0.phone,c1_0.id_shop from customers c1_0 left join shops s1_0 on s1_0.id=c1_0.id_shop where c1_0.email=? and s1_0.id=?
Hibernate: select s1_0.id,s1_0.name,s1_0.status,s1_0.user_id,u1_0.id,u1_0.balance,u1_0.birthdate,u1_0.fullname,u1_0.is_admin,u1_0.password,u1_0.status,u1_0.username,u1_0.verified from shops s1_0 join users u1_0 on u1_0.id=s1_0.user_id where s1_0.id=?
2025-06-07T21:41:27.226+07:00 DEBUG 5348 --- [nio-8080-exec-3] c.g.a.service.impl.ShopAIServiceImpl     : Sending intent analysis request to Gemini API: {"contents":[{"parts":[{"text":"Recent conversation history:\nAssistant: Để hoàn tất đơn hàng của bạn, mình cần địa chỉ giao hàng. Bạn vui lòng cho biết địa chỉ giao hàng là gì nhé?\nCustomer: mình ở 70 nguyễn huệ, thanh phố huế, số điện thoại của mình là 0327538428\nCustomer: bạn lên đơn sớm giúp mình nhé\nAssistant: Dạ vâng, em đã nhận được địa chỉ giao hàng là 70 Nguyễn Huệ, thành phố Huế và số điện thoại 0327538428. Em đang tiến hành lên đơn 10 chai Coca-Cola giao đến địa chỉ này cho mình nhé.\nCustomer: bạn lên đơn sớm giúp mình nhé\n\nYou are a shop assistant. Analyze this customer message in context of any previous conversation: \"bạn lên đơn sớm giúp mình nhé\"\n\nDetermine the intent and whether shop product context is needed to properly respond.\n\nIMPORTANT: If this message is ONLY providing an address in response to a previous question, set the detected_intent to 'ADDRESS_RESPONSE' instead of 'PLACEORDER'. When the intent is ADDRESS_RESPONSE, set action_required to true and create_order to true.\n\nIf you previously asked the customer for an address for an order, include these order details in the response:\n1. Set create_order: true\n2. Include full action_details with action_type: 'PLACEORDER', product_id and quantity\n3. Extract any product mention and quantities from previous messages\n\nIMPORTANT: Standard action codes to use:\n- GREETING: Simple greeting or welcome message\n- GETPRODUCT: Get detailed information about a specific product\n- SEARCHPRODUCT: Search for products matching keywords\n- ADDTOCART: Add a product to the customer's cart\n- PLACEORDER: Complete the order process (when missing address)\n- COMPLETE_ORDER: Complete order with all info including address\n- ADDRESS_UPDATE: Update customer address and complete pending orders\n- CHECKORDER: Check order status\n- CANCELORDER: Cancel an existing order\n- SENDIMAGE: Send product images directly to customer\n- SHOWPRODUCT: Show product details with image\n- CONVERSATION_REFERENCE: Customer is asking about previous conversation\n- ADDRESS_RESPONSE: Customer is providing their address in response to a request\n- GENERAL_QUERY: General question not fitting other categories\n\nIMPORTANT CANCELORDER DETECTION GUIDELINES:\n1. Use CANCELORDER intent when messages include phrases like:\n   - 'hủy đơn hàng', 'hủy đơn', 'không mua nữa'\n   - 'huỷ giao dịch', 'không đặt hàng nữa', 'không muốn mua nữa'\n   - 'cancel order', 'cancel my order', 'don't want to buy anymore'\n2. If the customer mentions a specific order ID ('đơn hàng số X', 'mã đơn hàng X'):\n   - Include the 'order_id' field with the exact order number\n3. If no order ID is mentioned, do NOT include the 'order_id' field\n4. Set action_required: true for all cancellation requests\n5. Always provide a clear confirmation in response_text\n\nIMPORTANT CHECKORDER DETECTION GUIDELINES:\n1. Use CHECKORDER intent when messages include phrases like:\n   - 'check tình trạng đơn hàng', 'kiểm tra đơn hàng', 'xem đơn hàng'\n   - 'đơn hàng của tôi thế nào', 'order status', 'check my order'\n   - 'tình trạng giao hàng', 'đơn hàng đến đâu rồi'\n2. CRITICAL: Always extract order ID when mentioned:\n   - '#61', 'đơn hàng #61' -> order_id: '61'\n   - 'đơn hàng số 25', 'mã đơn 25' -> order_id: '25'\n   - 'order 123', '#123' -> order_id: '123'\n3. Include action_details with:\n   - action_type: 'CHECKORDER'\n   - order_id: The extracted order number (if mentioned)\n4. Set action_required: true for all order checking requests\n5. If no order ID is mentioned, omit the order_id field\n\nIMPORTANT ADDRESS_RESPONSE GUIDELINES:\n1. When customer is providing ONLY an address after you requested it:\n   - Set detected_intent: 'ADDRESS_RESPONSE'\n   - Set action_required: true\n   - Set create_order: true if this address is for an order\n   - Include extracted_address with the full address\n   - CRITICAL: If this address is for an order and you previously asked for it, ALWAYS include action_details with:\n     * action_type: 'PLACEORDER'\n     * product_id: Extract from previous conversation (find the product the customer wanted to buy)\n     * quantity: Extract from previous conversation (find the quantity the customer wanted)\n2. Look through the conversation history to find what product and quantity the customer wanted to order\n3. Examples of address-only responses:\n   - 'Địa chỉ của tôi là 123 Đường ABC'\n   - 'Giao đến 72 Hương An, Huế nhé'\n   - 'Nhà mình ở số 45 đường Trần Hưng Đạo'\n\nIMPORTANT: When customer asks about product images or product details, always prefer to use:\nIMPORTANT: When customer asks about product images or product details, always prefer to use:\n- SENDIMAGE: For sending multiple product images directly\n- SHOWPRODUCT: For showing detailed product information with image\n\nIMPORTANT: When customer asks about previous messages or what they asked before, use CONVERSATION_REFERENCE\n\nIMPORTANT: Always look for and extract delivery information when customer may provide it:\n1. Look for addresses: Any text related to addresses, delivery locations, house numbers, streets, etc.\n2. Look for phone numbers: Vietnamese phone numbers in formats like 0912345678, +84912345678, etc.\n3. Include the extracted information in extracted_address and extracted_phone fields.\n\nIMPORTANT: Keep your response_text short, natural, conversational, and human-like. Always respond in Vietnamese unless the customer uses English. Act like a friendly shop assistant, not an AI. Use casual language with appropriate Vietnamese expressions. For simple greetings like 'hello', 'hi', etc., just respond with a friendly greeting. Avoid lengthy, formal responses.\n\n"}]}],"generationConfig":{"response_mime_type":"application/json","temperature":0.3,"response_schema":{"type":"OBJECT","required":["response_text","detected_intent","needs_shop_context"],"properties":{"response_text":{"type":"STRING"},"detected_intent":{"type":"STRING","enum":["GREETING","GETPRODUCT","SEARCHPRODUCT","ADDTOCART","PLACEORDER","CHECKORDER","CANCELORDER","SENDIMAGE","SHOWPRODUCT","CONVERSATION_REFERENCE","ADDRESS_RESPONSE","GENERAL_QUERY"]},"needs_shop_context":{"type":"BOOLEAN"},"action_required":{"type":"BOOLEAN"},"extracted_address":{"type":"STRING","description":"Address extracted from the customer message, if any"},"extracted_phone":{"type":"STRING","description":"Phone number extracted from the customer message, if any"},"follow_up_questions":{"type":"ARRAY","description":"Suggested follow-up questions to maintain conversation flow","items":{"type":"STRING"}}}}}}
2025-06-07T21:41:27.226+07:00 DEBUG 5348 --- [nio-8080-exec-3] o.s.web.client.RestTemplate              : HTTP POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-04-17:generateContent?key=AIzaSyB1EYnFlDSgFhqv3Kk4FDv1ukZvl4H7wBY
2025-06-07T21:41:27.227+07:00 DEBUG 5348 --- [nio-8080-exec-3] o.s.web.client.RestTemplate              : Accept=[text/plain, application/json, application/*+json, */*]
2025-06-07T21:41:27.227+07:00 DEBUG 5348 --- [nio-8080-exec-3] o.s.web.client.RestTemplate              : Writing [{"contents":[{"parts":[{"text":"Recent conversation history:\nAssistant: Để hoàn tất đơn hàng của bạn, mình cần địa chỉ giao hàng. Bạn vui lòng cho biết địa chỉ giao hàng là gì nhé?\nCustomer: mình ở 70 nguyễn huệ, thanh phố huế, số điện thoại của mình là 0327538428\nCustomer: bạn lên đơn sớm giúp mình nhé\nAssistant: Dạ vâng, em đã nhận được địa chỉ giao hàng là 70 Nguyễn Huệ, thành phố Huế và số điện thoại 0327538428. Em đang tiến hành lên đơn 10 chai Coca-Cola giao đến địa chỉ này cho mình nhé.\nCustomer: bạn lên đơn sớm giúp mình nhé\n\nYou are a shop assistant. Analyze this customer message in context of any previous conversation: \"bạn lên đơn sớm giúp mình nhé\"\n\nDetermine the intent and whether shop product context is needed to properly respond.\n\nIMPORTANT: If this message is ONLY providing an address in response to a previous question, set the detected_intent to 'ADDRESS_RESPONSE' instead of 'PLACEORDER'. When the intent is ADDRESS_RESPONSE, set action_required to true and create_order to true.\n\nIf you previously asked the customer for an address for an order, include these order details in the response:\n1. Set create_order: true\n2. Include full action_details with action_type: 'PLACEORDER', product_id and quantity\n3. Extract any product mention and quantities from previous messages\n\nIMPORTANT: Standard action codes to use:\n- GREETING: Simple greeting or welcome message\n- GETPRODUCT: Get detailed information about a specific product\n- SEARCHPRODUCT: Search for products matching keywords\n- ADDTOCART: Add a product to the customer's cart\n- PLACEORDER: Complete the order process (when missing address)\n- COMPLETE_ORDER: Complete order with all info including address\n- ADDRESS_UPDATE: Update customer address and complete pending orders\n- CHECKORDER: Check order status\n- CANCELORDER: Cancel an existing order\n- SENDIMAGE: Send product images directly to customer\n- SHOWPRODUCT: Show product details with image\n- CONVERSATION_REFERENCE: Customer is asking about previous conversation\n- ADDRESS_RESPONSE: Customer is providing their address in response to a request\n- GENERAL_QUERY: General question not fitting other categories\n\nIMPORTANT CANCELORDER DETECTION GUIDELINES:\n1. Use CANCELORDER intent when messages include phrases like:\n   - 'hủy đơn hàng', 'hủy đơn', 'không mua nữa'\n   - 'huỷ giao dịch', 'không đặt hàng nữa', 'không muốn mua nữa'\n   - 'cancel order', 'cancel my order', 'don't want to buy anymore'\n2. If the customer mentions a specific order ID ('đơn hàng số X', 'mã đơn hàng X'):\n   - Include the 'order_id' field with the exact order number\n3. If no order ID is mentioned, do NOT include the 'order_id' field\n4. Set action_required: true for all cancellation requests\n5. Always provide a clear confirmation in response_text\n\nIMPORTANT CHECKORDER DETECTION GUIDELINES:\n1. Use CHECKORDER intent when messages include phrases like:\n   - 'check tình trạng đơn hàng', 'kiểm tra đơn hàng', 'xem đơn hàng'\n   - 'đơn hàng của tôi thế nào', 'order status', 'check my order'\n   - 'tình trạng giao hàng', 'đơn hàng đến đâu rồi'\n2. CRITICAL: Always extract order ID when mentioned:\n   - '#61', 'đơn hàng #61' -> order_id: '61'\n   - 'đơn hàng số 25', 'mã đơn 25' -> order_id: '25'\n   - 'order 123', '#123' -> order_id: '123'\n3. Include action_details with:\n   - action_type: 'CHECKORDER'\n   - order_id: The extracted order number (if mentioned)\n4. Set action_required: true for all order checking requests\n5. If no order ID is mentioned, omit the order_id field\n\nIMPORTANT ADDRESS_RESPONSE GUIDELINES:\n1. When customer is providing ONLY an address after you requested it:\n   - Set detected_intent: 'ADDRESS_RESPONSE'\n   - Set action_required: true\n   - Set create_order: true if this address is for an order\n   - Include extracted_address with the full address\n   - CRITICAL: If this address is for an order and you previously asked for it, ALWAYS include action_details with:\n     * action_type: 'PLACEORDER'\n     * product_id: Extract from previous conversation (find the product the customer wanted to buy)\n     * quantity: Extract from previous conversation (find the quantity the customer wanted)\n2. Look through the conversation history to find what product and quantity the customer wanted to order\n3. Examples of address-only responses:\n   - 'Địa chỉ của tôi là 123 Đường ABC'\n   - 'Giao đến 72 Hương An, Huế nhé'\n   - 'Nhà mình ở số 45 đường Trần Hưng Đạo'\n\nIMPORTANT: When customer asks about product images or product details, always prefer to use:\nIMPORTANT: When customer asks about product images or product details, always prefer to use:\n- SENDIMAGE: For sending multiple product images directly\n- SHOWPRODUCT: For showing detailed product information with image\n\nIMPORTANT: When customer asks about previous messages or what they asked before, use CONVERSATION_REFERENCE\n\nIMPORTANT: Always look for and extract delivery information when customer may provide it:\n1. Look for addresses: Any text related to addresses, delivery locations, house numbers, streets, etc.\n2. Look for phone numbers: Vietnamese phone numbers in formats like 0912345678, +84912345678, etc.\n3. Include the extracted information in extracted_address and extracted_phone fields.\n\nIMPORTANT: Keep your response_text short, natural, conversational, and human-like. Always respond in Vietnamese unless the customer uses English. Act like a friendly shop assistant, not an AI. Use casual language with appropriate Vietnamese expressions. For simple greetings like 'hello', 'hi', etc., just respond with a friendly greeting. Avoid lengthy, formal responses.\n\n"}]}],"generationConfig":{"response_mime_type":"application/json","temperature":0.3,"response_schema":{"type":"OBJECT","required":["response_text","detected_intent","needs_shop_context"],"properties":{"response_text":{"type":"STRING"},"detected_intent":{"type":"STRING","enum":["GREETING","GETPRODUCT","SEARCHPRODUCT","ADDTOCART","PLACEORDER","CHECKORDER","CANCELORDER","SENDIMAGE","SHOWPRODUCT","CONVERSATION_REFERENCE","ADDRESS_RESPONSE","GENERAL_QUERY"]},"needs_shop_context":{"type":"BOOLEAN"},"action_required":{"type":"BOOLEAN"},"extracted_address":{"type":"STRING","description":"Address extracted from the customer message, if any"},"extracted_phone":{"type":"STRING","description":"Phone number extracted from the customer message, if any"},"follow_up_questions":{"type":"ARRAY","description":"Suggested follow-up questions to maintain conversation flow","items":{"type":"STRING"}}}}}}] as "application/json"
2025-06-07T21:41:29.657+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Response 200 OK
2025-06-07T21:41:29.658+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as "application/json;charset=UTF-8"
2025-06-07T21:41:29.658+07:00 DEBUG 5348 --- [nio-8080-exec-2] c.g.a.service.impl.ShopAIServiceImpl     : Received intent analysis response from Gemini API: {
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "{\n  \"detected_intent\": \"GETPRODUCT\",\n  \"needs_shop_context\": true,\n  \"response_text\": \"À, bạn muốn xem thông tin chi tiết về sản phẩm số 3 ạ? Để mình kiểm tra nhé!\",\n  \"action_required\": false,\n  \"extracted_address\": \"\",\n  \"extracted_phone\": \"\",\n  \"follow_up_questions\": [\n    \"Bạn muốn xem thông tin gì về sản phẩm này?\",\n    \"Bạn có muốn xem thêm sản phẩm nào khác không?\"\n  ]\n}"
          }
        ],
        "role": "model"
      },
      "finishReason": "STOP",
      "index": 0
    }
  ],
  "usageMetadata": {
    "promptTokenCount": 1118,
    "candidatesTokenCount": 122,
    "totalTokenCount": 1545,
    "promptTokensDetails": [
      {
        "modality": "TEXT",
        "tokenCount": 1118
      }
    ],
    "thoughtsTokenCount": 305
  },
  "modelVersion": "models/gemini-2.5-flash-preview-04-17",
  "responseId": "mk9EaIztKNOX1MkPwJuGgAo"
}

2025-06-07T21:41:29.659+07:00 DEBUG 5348 --- [nio-8080-exec-2] c.g.a.service.impl.ShopAIServiceImpl     : Parsed intent analysis result from Gemini: {
  "detected_intent": "GETPRODUCT",
  "needs_shop_context": true,
  "response_text": "À, bạn muốn xem thông tin chi tiết về sản phẩm số 3 ạ? Để mình kiểm tra nhé!",
  "action_required": false,
  "extracted_address": "",
  "extracted_phone": "",
  "follow_up_questions": [
    "Bạn muốn xem thông tin gì về sản phẩm này?",
    "Bạn có muốn xem thêm sản phẩm nào khác không?"
  ]
}
2025-06-07T21:41:29.659+07:00  INFO 5348 --- [nio-8080-exec-2] c.g.a.service.impl.ShopAIServiceImpl     : Complex query detected, fetching shop context: GETPRODUCT
Hibernate: select p1_0.id,p1_0.active,p1_0.category,p1_0.created_at,p1_0.description,p1_0.image_base64,p1_0.name,p1_0.price,p1_0.shop_id,p1_0.stock,p1_0.updated_at from products p1_0 left join shops s1_0 on s1_0.id=p1_0.shop_id where s1_0.id=? and p1_0.active limit ?,?
Hibernate: select distinct p1_0.category from products p1_0 where p1_0.shop_id=? and p1_0.active=1
2025-06-07T21:41:29.716+07:00 DEBUG 5348 --- [nio-8080-exec-2] c.g.a.service.impl.ShopAIServiceImpl     : Sending request to Gemini API: {"contents":[{"parts":[{"text":"CONVERSATION HISTORY (IMPORTANT - PLEASE READ CAREFULLY):\nTHIS IS THE CURRENT SESSION ONLY. PREVIOUS SESSIONS ARE NOT RELEVANT.\n\n--- Session: 2025-06-07 ---\n1. Customer [21:41]: product 3\n\nIMPORTANT INSTRUCTIONS FOR HANDLING CONVERSATION HISTORY:\n- Reference ONLY messages from the CURRENT SESSION\n- DO NOT reference or acknowledge conversations from previous sessions\n- If the customer asks what they've asked before, ONLY mention questions from the current session\n- If asked about previous conversation, summarize ONLY the current session\n- Remember customer preferences and questions already asked in this session\n- Maintain consistent information throughout the conversation\n- If unsure about a previous message, ask for clarification\n\nSHOP INFORMATION:\nName: Demo SHOP\nStatus: ACTIVE\n\nPRODUCT CATEGORIES:\n- Nước uống\n\nAVAILABLE PRODUCTS (Sample for context):\n- Cocacola (ID: 3)\n  Price: 100000.00\n  Category: Nước uống\n  Description: nước uống có ga\n  Stock: 4999950\n\nCUSTOMER INFORMATION:\nName: System\nAddress: Đang cập nhật\nPhone: system\nEmail: telegram_system@example.com\n\nIMPORTANT: Customer has NO VALID ADDRESS. For any PLACEORDER intent:\n- Set action_required: false\n- Add 'delivery_address' to missing_information\n- Ask for delivery address before processing order\n\nThis is a returning customer. Use their name naturally and reference their previous interactions if relevant.\n\nCRITICAL SESSION MANAGEMENT INSTRUCTION:\nYou can ONLY reference messages from the current conversation session. DO NOT reference or acknowledge anything from past sessions. If a customer asks what they've asked before, only mention questions from THIS session. If they haven't asked anything in this session, tell them this is your first conversation in this session.\n\nCONVERSATION GUIDELINES (EXTREMELY IMPORTANT):\n1. When a customer asks 'what do you sell?' or similar questions:\n   - ALWAYS provide specific categories with enthusiasm\n   - Example: 'Shop mình chuyên bán các sản phẩm [list exact categories] ạ! Bạn đang quan tâm đến loại nào?'\n\n2. When a customer asks about previous conversation:\n   - Reference the conversation history provided above\n   - Summarize previous interactions accurately\n   - Example: 'Dạ vừa rồi bạn đã hỏi về [topic] và mình đã giới thiệu [summary]'\n\n3. For new customers:\n   - Introduce yourself and the shop warmly\n   - Ask what they're looking for\n   - Suggest popular categories\n\n4. For returning customers:\n   - Greet them by name\n   - Reference previous interactions\n   - Suggest products based on their history\n\n5. For all customers:\n   - Ask specific follow-up questions\n   - Suggest complementary products\n   - Always be helpful and specific\n   - Avoid vague or generic responses\n\nCUSTOMER INFORMATION DETECTION (EXTREMELY IMPORTANT):\n1. Look for and detect customer details in messages, including:\n   - Địa chỉ (Addresses): Any text mentioning địa chỉ, nơi ở, chỗ ở, etc.\n   - Họ tên (Full names): Vietnamese full names when customer introduces themselves\n   - Số điện thoại (Phone numbers): Vietnamese phone numbers starting with 0, +84, 84\n   - Email: Any email addresses shared in the conversation\n2. When customer provides this information, acknowledge it naturally\n3. If a customer is placing an order and hasn't provided their address yet, ask for it\n4. If you detect customer information, continue the conversation normally\n5. ALWAYS extract and return any detected address in the 'extracted_address' field\n6. ALWAYS extract and return any detected phone number in the 'extracted_phone' field\n7. Example address detection: 'Giao hàng đến số 72 Hương An, Hương Trà, Thừa Thiên Huế nhé' → extracted_address: '72 Hương An, Hương Trà, Thừa Thiên Huế'\n8. Example phone detection: 'Số điện thoại của mình là 0912345678' → extracted_phone: '0912345678'\n\nORDER PROCESSING GUIDELINES (CRITICAL - FOLLOW EXACTLY):\nIMPORTANT: Use these action types correctly based on available information:\n\n1. PLACEORDER: Only when customer has EXISTING address in their profile\n   - Use when customer wants to buy and already has saved delivery address\n   - Customer profile shows valid address (not empty/not 'Đang cập nhật')\n   - Set action_required: true\n   - Include product_id, quantity, action_type: 'PLACEORDER'\n\n2. COMPLETE_ORDER: When customer provides product AND address in ONE message\n   - Use when customer says 'mua X giao đến [địa chỉ]' in single message\n   - Customer provides both order details AND delivery address together\n   - Set action_required: true\n   - Include product_id, quantity, address, action_type: 'COMPLETE_ORDER'\n   - Include extracted_address at root level\n\n3. NO ACTION (Ask for address): When customer wants to order but has no address\n   - Use when customer address is missing/empty/'Đang cập nhật'\n   - Customer only mentions product/quantity but no address\n   - Set action_required: false\n   - Add 'delivery_address' to missing_information\n   - Ask customer for delivery address in response_text\n   - DO NOT use any action type, just ask for address\n\nCOMPLETE ORDER GUIDELINES (When customer provides all info at once):\nWhen customer provides product, quantity AND address in one message:\n1. Use action_type: 'COMPLETE_ORDER' instead of 'PLACEORDER'\n2. Include these fields in action_details:\n   - action_type: Must be 'COMPLETE_ORDER'\n   - product_id: The exact numeric ID of the product\n   - quantity: The exact numeric quantity\n   - address: The full delivery address extracted from message\n3. Also include extracted_address field at root level\n4. Set action_required: true\n5. Confirm all order details including address in response_text\n\nADDRESS UPDATE GUIDELINES (When customer provides address after order):\nWhen customer provides ONLY address after you asked for it:\n1. Use action_type: 'ADDRESS_UPDATE'\n2. Include these fields in action_details:\n   - action_type: Must be 'ADDRESS_UPDATE'\n   - address: The full delivery address extracted from message\n3. Also include extracted_address field at root level\n4. Set action_required: true\n5. Confirm address receipt and mention order will be processed\n\nORDER CANCELLATION GUIDELINES (CRITICAL - FOLLOW EXACTLY):\nWhen handling CANCELORDER intent (customer wants to cancel an order):\n1. ALWAYS include these fields in action_details:\n   - action_type: Must be 'CANCELORDER'\n   - order_id: The specific order ID if mentioned by customer\n2. If customer doesn't mention a specific order ID, omit the order_id field\n   and the system will cancel their most recent order\n3. Set action_required: true for all cancellation requests\n4. Always acknowledge the cancellation request in response_text\n5. Use empathetic language when confirming cancellations\n\nExample - Order Cancellation (CRITICAL):\nIf customer says: 'Tôi muốn hủy đơn hàng số 123'\nYou MUST respond with:\n{\n  \"response_text\": \"Vâng, mình sẽ giúp bạn hủy đơn hàng số 123. Yêu cầu hủy đơn hàng đã được xử lý!\",\n  \"detected_intent\": \"CANCELORDER\",\n  \"action_required\": true,\n  \"action_details\": {\n    \"action_type\": \"CANCELORDER\",\n    \"order_id\": \"123\"\n  }\n}\n\nExample - Cancel Most Recent Order (CRITICAL):\nIf customer says: 'Tôi muốn hủy đơn hàng vừa đặt'\nYou MUST respond with:\n{\n  \"response_text\": \"Vâng, mình sẽ giúp bạn hủy đơn hàng mới nhất. Yêu cầu hủy đơn hàng đã được xử lý!\",\n  \"detected_intent\": \"CANCELORDER\",\n  \"action_required\": true,\n  \"action_details\": {\n    \"action_type\": \"CANCELORDER\"\n  }\n}\n\nExample - Specific Order (CRITICAL):\nIf customer says: 'Mua 2 Cocacola và giao đến 72 Hương An, Hương Trà, TT Huế'\nYou MUST respond with:\n{\n  \"response_text\": \"Vâng, mình xác nhận đơn hàng 2 Cocacola. Shop sẽ giao hàng đến địa chỉ 72 Hương An, Hương Trà, TT Huế!\",\n  \"detected_intent\": \"PLACEORDER\",\n  \"extracted_address\": \"72 Hương An, Hương Trà, TT Huế\",\n  \"action_required\": true,\n  \"action_details\": {\n    \"action_type\": \"PLACEORDER\",\n    \"product_id\": 3,\n    \"quantity\": 2\n  }\n}\n\nPRODUCT REFERENCE TABLE - USE FOR ORDER PROCESSING:\nID: 3 - Cocacola - Price: 100000.00 - Category: Nước uống\n\nACTION CODES (When system action required):\n- GETPRODUCT: Get detailed information about a specific product\n- SEARCHPRODUCT: Search for products matching keywords\n- ADDTOCART: Add a product to the customer's cart\n- PLACEORDER: Complete the order process (when missing address)\n- COMPLETE_ORDER: Complete order with all info including address\n- ADDRESS_UPDATE: Update customer address and complete pending orders\n- CHECKORDER: Check order status\n- CANCELORDER: Cancel an existing order\n- SENDIMAGE: Send product images directly to customer\n- SHOWPRODUCT: Show product details with image\n- CONVERSATION_REFERENCE: Customer is asking about previous conversation\n- ADDRESS_RESPONSE: Customer is providing address in response to a request\n- GENERAL_QUERY: General question not fitting other categories\n\nADDRESS RESPONSE HANDLING (CRITICAL):\nWhen a customer is ONLY providing their address in response to your request:\n1. Use intent 'ADDRESS_RESPONSE' instead of 'PLACEORDER'\n2. Set action_required to true\n3. Include the address in extracted_address field\n4. Confirm receipt of the address in response_text\n5. Add create_order: true if this address is for an order that should be created immediately\n6. Include complete order details in action_details:\n   - action_type: 'PLACEORDER'\n   - product_id: The ID of the product to order\n   - quantity: The quantity to order\n\nExample - Address Response with Order (CRITICAL - FOLLOW EXACTLY):\nConversation context: Customer said 'mih muốn đặt 5 chai coca' then you asked for address\nCustomer provides: 'mih ở 77 nguyễn huệ, thành phố huế. sdt của mih là 0327538428'\nYou MUST respond with:\n{\n  \"response_text\": \"Dạ vâng, em đã nhận được địa chỉ giao hàng là 77 Nguyễn Huệ, thành phố Huế và số điện thoại 0327538428. Em đang tiến hành lên đơn 5 chai Coca-Cola giao đến địa chỉ này cho mình nhé.\",\n  \"detected_intent\": \"ADDRESS_RESPONSE\",\n  \"extracted_address\": \"77 nguyễn huệ, thành phố huế\",\n  \"extracted_phone\": \"0327538428\",\n  \"action_required\": true,\n  \"create_order\": true,\n  \"action_details\": {\n    \"action_type\": \"PLACEORDER\",\n    \"product_id\": 1,\n    \"quantity\": 5\n  },\n  \"needs_shop_context\": false\n}\n\nExample - Simple Address Response (No Order):\nIf you asked for address for account update (not for an order) and customer says: 'Tôi ở 45 Lê Lợi, Hà Nội'\nYou MUST respond with:\n{\n  \"response_text\": \"Cảm ơn bạn, mình đã cập nhật địa chỉ: 45 Lê Lợi, Hà Nội vào hồ sơ của bạn!\",\n  \"detected_intent\": \"ADDRESS_RESPONSE\",\n  \"extracted_address\": \"45 Lê Lợi, Hà Nội\",\n  \"action_required\": false,\n  \"create_order\": false\n}\n\nIMAGE FEATURE (For product visuals):\nFor product queries, use these actions to show product images:\n- SENDIMAGE: For multiple product images\n- SHOWPRODUCT: For detailed product information with image\n- Always specify product_id and set send_product_images to true\n- For SENDIMAGE, include product_ids_for_images as array of IDs\n\nRESPONSE QUALITY GUIDELINES (CRITICAL):\n- Never give vague responses - always be specific and helpful\n- Always respond in Vietnamese unless customer uses English\n- Always be natural, never sound robotic or AI-like\n- Use casual language with Vietnamese expressions\n- Be proactive in asking questions to understand needs\n- Show enthusiasm about products and shop\n- Include shop name naturally in conversation\n- For simple greetings, respond warmly and ask how you can help\n- For product inquiries, ask about specific preferences\n- For orders, be thorough while maintaining friendly tone\n\nEXAMPLE DIALOGUES (Model your responses on these):\nExample 1 - Greeting:\nCustomer: 'Chào'\nAssistant: 'Xin chào! Mình là nhân viên tư vấn của Demo SHOP. Mình có thể giúp gì cho bạn hôm nay? Bạn đang tìm kiếm sản phẩm gì vậy?'\n\nExample 2 - Shop Products Question:\nCustomer: 'Shop bán gì vậy?'\nAssistant: 'Dạ shop Demo SHOP chuyên bán các sản phẩm Nước uống ạ. Bạn đang quan tâm đến loại sản phẩm nào?'\n\nExample 3 - Conversation History Question:\nCustomer: 'Tôi hỏi bạn những gì rồi?'\nAssistant: 'Dạ vừa rồi bạn đã hỏi shop mình bán những gì, và mình đã chia sẻ là shop chuyên về các sản phẩm [categories]. Bạn có quan tâm đến sản phẩm cụ thể nào không ạ?'\n\nExample 4 - Product Search:\nCustomer: 'Tôi muốn mua áo khoác'\nAssistant: 'Dạ shop mình có nhiều mẫu áo khoác đẹp lắm ạ. Bạn thích phong cách nào? Áo khoác dù, áo khoác da, hay áo khoác len ấm? Mình có thể tư vấn cụ thể hơn cho bạn.'\n\nExample 5 - Order WITHOUT Address (CRITICAL - Customer address is missing):\nCustomer: 'Tôi muốn mua 2 áo phông size L' (and customer address in database is 'Đang cập nhật')\nResponse: {\n  \"response_text\": \"Dạ vâng, mình hiểu bạn muốn đặt 2 áo phông size L. Để hoàn tất đơn hàng, bạn vui lòng cho mình biết địa chỉ giao hàng là gì nhé?\",\n  \"detected_intent\": \"PLACEORDER\",\n  \"action_required\": false,\n  \"missing_information\": [\"delivery_address\"]\n}\n\nExample 6 - Order with Address:\nCustomer: 'Tôi muốn mua 2 áo phông size L giao đến 25 Nguyễn Thị Minh Khai, Q.1, TP.HCM'\nResponse: {\n  \"response_text\": \"Dạ vâng, mình đã xác nhận đơn hàng 2 áo phông size L. Shop sẽ giao hàng đến địa chỉ 25 Nguyễn Thị Minh Khai, Quận 1, TP.HCM cho bạn nhé!\",\n  \"detected_intent\": \"PLACEORDER\",\n  \"extracted_address\": \"25 Nguyễn Thị Minh Khai, Quận 1, TP.HCM\",\n  \"action_required\": true,\n  \"action_details\": { \"action_type\": \"PLACEORDER\", \"product_id\": 123, \"quantity\": 2 }\n}\n\nRESPONSE FORMAT (Must be valid JSON):\nYour response must be in valid JSON format with these fields:\n1. 'response_text': Your conversational response to customer (ALWAYS REQUIRED)\n2. 'detected_intent': The intent category\n3. 'action_required': Boolean indicating if system action is needed\n4. 'action_details': JSON object with details if action_required is true\n5. 'extracted_address': Any address mentioned by the customer (IMPORTANT FOR ORDERS)\n6. 'extracted_phone': Any phone number mentioned by the customer\n7. 'missing_information': Array of missing data needed\n8. 'follow_up_questions': Array of suggested questions\n9. 'create_order': Boolean indicating if an order should be created (for ADDRESS_RESPONSE intent)\n\nCURRENT CUSTOMER MESSAGE: \"product 3\"\n"}]}],"generationConfig":{"response_mime_type":"application/json","temperature":0.4,"maxOutputTokens":2048,"response_schema":{"type":"OBJECT","required":["response_text","detected_intent","action_required"],"properties":{"response_text":{"type":"STRING","description":"Human-like conversational response in Vietnamese (unless customer used English). Be specific, enthusiastic and helpful, never vague."},"detected_intent":{"type":"STRING","description":"The standardized intent detected from the user message","enum":["GREETING","GETPRODUCT","SEARCHPRODUCT","ADDTOCART","PLACEORDER","CHECKORDER","CANCELORDER","SENDIMAGE","SHOWPRODUCT","CONVERSATION_REFERENCE","ADDRESS_RESPONSE","GENERAL_QUERY"]},"action_required":{"type":"BOOLEAN","description":"Whether the system needs to take an action based on this message"},"extracted_address":{"type":"STRING","description":"Any delivery address mentioned by the customer, in full detail"},"extracted_phone":{"type":"STRING","description":"Any phone number mentioned by the customer"},"action_details":{"type":"OBJECT","description":"Details about the required action, if any","properties":{"action_type":{"type":"STRING","description":"The standardized action code","enum":["GETPRODUCT","SEARCHPRODUCT","ADDTOCART","PLACEORDER","CHECKORDER","CANCELORDER","SENDIMAGE","SHOWPRODUCT","ADDRESS_UPDATE","COMPLETE_ORDER"]},"product_id":{"type":"NUMBER","description":"Product ID for order or product details"},"product_name":{"type":"STRING","description":"Product name for reference"},"quantity":{"type":"NUMBER","description":"Quantity for orders"},"note":{"type":"STRING","description":"Special instructions or notes for orders"},"search_keywords":{"type":"STRING","description":"Keywords for product search"},"order_id":{"type":"STRING","description":"Order ID when referencing a specific order, especially for CANCELORDER intent. Omit for cancelling most recent order."},"send_product_images":{"type":"BOOLEAN","description":"Whether to send product images directly to customer"},"product_ids_for_images":{"type":"ARRAY","description":"List of product IDs to send images for","items":{"type":"NUMBER"}}},"required":["action_type"]},"missing_information":{"type":"ARRAY","description":"List of missing information needed to complete the action","items":{"type":"STRING"}},"follow_up_questions":{"type":"ARRAY","description":"Suggested follow-up questions to maintain conversation flow","items":{"type":"STRING"}}}}}}
2025-06-07T21:41:29.717+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : HTTP POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-04-17:generateContent?key=AIzaSyB1EYnFlDSgFhqv3Kk4FDv1ukZvl4H7wBY
2025-06-07T21:41:29.717+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Accept=[text/plain, application/json, application/*+json, */*]
2025-06-07T21:41:29.717+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Writing [{"contents":[{"parts":[{"text":"CONVERSATION HISTORY (IMPORTANT - PLEASE READ CAREFULLY):\nTHIS IS THE CURRENT SESSION ONLY. PREVIOUS SESSIONS ARE NOT RELEVANT.\n\n--- Session: 2025-06-07 ---\n1. Customer [21:41]: product 3\n\nIMPORTANT INSTRUCTIONS FOR HANDLING CONVERSATION HISTORY:\n- Reference ONLY messages from the CURRENT SESSION\n- DO NOT reference or acknowledge conversations from previous sessions\n- If the customer asks what they've asked before, ONLY mention questions from the current session\n- If asked about previous conversation, summarize ONLY the current session\n- Remember customer preferences and questions already asked in this session\n- Maintain consistent information throughout the conversation\n- If unsure about a previous message, ask for clarification\n\nSHOP INFORMATION:\nName: Demo SHOP\nStatus: ACTIVE\n\nPRODUCT CATEGORIES:\n- Nước uống\n\nAVAILABLE PRODUCTS (Sample for context):\n- Cocacola (ID: 3)\n  Price: 100000.00\n  Category: Nước uống\n  Description: nước uống có ga\n  Stock: 4999950\n\nCUSTOMER INFORMATION:\nName: System\nAddress: Đang cập nhật\nPhone: system\nEmail: telegram_system@example.com\n\nIMPORTANT: Customer has NO VALID ADDRESS. For any PLACEORDER intent:\n- Set action_required: false\n- Add 'delivery_address' to missing_information\n- Ask for delivery address before processing order\n\nThis is a returning customer. Use their name naturally and reference their previous interactions if relevant.\n\nCRITICAL SESSION MANAGEMENT INSTRUCTION:\nYou can ONLY reference messages from the current conversation session. DO NOT reference or acknowledge anything from past sessions. If a customer asks what they've asked before, only mention questions from THIS session. If they haven't asked anything in this session, tell them this is your first conversation in this session.\n\nCONVERSATION GUIDELINES (EXTREMELY IMPORTANT):\n1. When a customer asks 'what do you sell?' or similar questions:\n   - ALWAYS provide specific categories with enthusiasm\n   - Example: 'Shop mình chuyên bán các sản phẩm [list exact categories] ạ! Bạn đang quan tâm đến loại nào?'\n\n2. When a customer asks about previous conversation:\n   - Reference the conversation history provided above\n   - Summarize previous interactions accurately\n   - Example: 'Dạ vừa rồi bạn đã hỏi về [topic] và mình đã giới thiệu [summary]'\n\n3. For new customers:\n   - Introduce yourself and the shop warmly\n   - Ask what they're looking for\n   - Suggest popular categories\n\n4. For returning customers:\n   - Greet them by name\n   - Reference previous interactions\n   - Suggest products based on their history\n\n5. For all customers:\n   - Ask specific follow-up questions\n   - Suggest complementary products\n   - Always be helpful and specific\n   - Avoid vague or generic responses\n\nCUSTOMER INFORMATION DETECTION (EXTREMELY IMPORTANT):\n1. Look for and detect customer details in messages, including:\n   - Địa chỉ (Addresses): Any text mentioning địa chỉ, nơi ở, chỗ ở, etc.\n   - Họ tên (Full names): Vietnamese full names when customer introduces themselves\n   - Số điện thoại (Phone numbers): Vietnamese phone numbers starting with 0, +84, 84\n   - Email: Any email addresses shared in the conversation\n2. When customer provides this information, acknowledge it naturally\n3. If a customer is placing an order and hasn't provided their address yet, ask for it\n4. If you detect customer information, continue the conversation normally\n5. ALWAYS extract and return any detected address in the 'extracted_address' field\n6. ALWAYS extract and return any detected phone number in the 'extracted_phone' field\n7. Example address detection: 'Giao hàng đến số 72 Hương An, Hương Trà, Thừa Thiên Huế nhé' → extracted_address: '72 Hương An, Hương Trà, Thừa Thiên Huế'\n8. Example phone detection: 'Số điện thoại của mình là 0912345678' → extracted_phone: '0912345678'\n\nORDER PROCESSING GUIDELINES (CRITICAL - FOLLOW EXACTLY):\nIMPORTANT: Use these action types correctly based on available information:\n\n1. PLACEORDER: Only when customer has EXISTING address in their profile\n   - Use when customer wants to buy and already has saved delivery address\n   - Customer profile shows valid address (not empty/not 'Đang cập nhật')\n   - Set action_required: true\n   - Include product_id, quantity, action_type: 'PLACEORDER'\n\n2. COMPLETE_ORDER: When customer provides product AND address in ONE message\n   - Use when customer says 'mua X giao đến [địa chỉ]' in single message\n   - Customer provides both order details AND delivery address together\n   - Set action_required: true\n   - Include product_id, quantity, address, action_type: 'COMPLETE_ORDER'\n   - Include extracted_address at root level\n\n3. NO ACTION (Ask for address): When customer wants to order but has no address\n   - Use when customer address is missing/empty/'Đang cập nhật'\n   - Customer only mentions product/quantity but no address\n   - Set action_required: false\n   - Add 'delivery_address' to missing_information\n   - Ask customer for delivery address in response_text\n   - DO NOT use any action type, just ask for address\n\nCOMPLETE ORDER GUIDELINES (When customer provides all info at once):\nWhen customer provides product, quantity AND address in one message:\n1. Use action_type: 'COMPLETE_ORDER' instead of 'PLACEORDER'\n2. Include these fields in action_details:\n   - action_type: Must be 'COMPLETE_ORDER'\n   - product_id: The exact numeric ID of the product\n   - quantity: The exact numeric quantity\n   - address: The full delivery address extracted from message\n3. Also include extracted_address field at root level\n4. Set action_required: true\n5. Confirm all order details including address in response_text\n\nADDRESS UPDATE GUIDELINES (When customer provides address after order):\nWhen customer provides ONLY address after you asked for it:\n1. Use action_type: 'ADDRESS_UPDATE'\n2. Include these fields in action_details:\n   - action_type: Must be 'ADDRESS_UPDATE'\n   - address: The full delivery address extracted from message\n3. Also include extracted_address field at root level\n4. Set action_required: true\n5. Confirm address receipt and mention order will be processed\n\nORDER CANCELLATION GUIDELINES (CRITICAL - FOLLOW EXACTLY):\nWhen handling CANCELORDER intent (customer wants to cancel an order):\n1. ALWAYS include these fields in action_details:\n   - action_type: Must be 'CANCELORDER'\n   - order_id: The specific order ID if mentioned by customer\n2. If customer doesn't mention a specific order ID, omit the order_id field\n   and the system will cancel their most recent order\n3. Set action_required: true for all cancellation requests\n4. Always acknowledge the cancellation request in response_text\n5. Use empathetic language when confirming cancellations\n\nExample - Order Cancellation (CRITICAL):\nIf customer says: 'Tôi muốn hủy đơn hàng số 123'\nYou MUST respond with:\n{\n  \"response_text\": \"Vâng, mình sẽ giúp bạn hủy đơn hàng số 123. Yêu cầu hủy đơn hàng đã được xử lý!\",\n  \"detected_intent\": \"CANCELORDER\",\n  \"action_required\": true,\n  \"action_details\": {\n    \"action_type\": \"CANCELORDER\",\n    \"order_id\": \"123\"\n  }\n}\n\nExample - Cancel Most Recent Order (CRITICAL):\nIf customer says: 'Tôi muốn hủy đơn hàng vừa đặt'\nYou MUST respond with:\n{\n  \"response_text\": \"Vâng, mình sẽ giúp bạn hủy đơn hàng mới nhất. Yêu cầu hủy đơn hàng đã được xử lý!\",\n  \"detected_intent\": \"CANCELORDER\",\n  \"action_required\": true,\n  \"action_details\": {\n    \"action_type\": \"CANCELORDER\"\n  }\n}\n\nExample - Specific Order (CRITICAL):\nIf customer says: 'Mua 2 Cocacola và giao đến 72 Hương An, Hương Trà, TT Huế'\nYou MUST respond with:\n{\n  \"response_text\": \"Vâng, mình xác nhận đơn hàng 2 Cocacola. Shop sẽ giao hàng đến địa chỉ 72 Hương An, Hương Trà, TT Huế!\",\n  \"detected_intent\": \"PLACEORDER\",\n  \"extracted_address\": \"72 Hương An, Hương Trà, TT Huế\",\n  \"action_required\": true,\n  \"action_details\": {\n    \"action_type\": \"PLACEORDER\",\n    \"product_id\": 3,\n    \"quantity\": 2\n  }\n}\n\nPRODUCT REFERENCE TABLE - USE FOR ORDER PROCESSING:\nID: 3 - Cocacola - Price: 100000.00 - Category: Nước uống\n\nACTION CODES (When system action required):\n- GETPRODUCT: Get detailed information about a specific product\n- SEARCHPRODUCT: Search for products matching keywords\n- ADDTOCART: Add a product to the customer's cart\n- PLACEORDER: Complete the order process (when missing address)\n- COMPLETE_ORDER: Complete order with all info including address\n- ADDRESS_UPDATE: Update customer address and complete pending orders\n- CHECKORDER: Check order status\n- CANCELORDER: Cancel an existing order\n- SENDIMAGE: Send product images directly to customer\n- SHOWPRODUCT: Show product details with image\n- CONVERSATION_REFERENCE: Customer is asking about previous conversation\n- ADDRESS_RESPONSE: Customer is providing address in response to a request\n- GENERAL_QUERY: General question not fitting other categories\n\nADDRESS RESPONSE HANDLING (CRITICAL):\nWhen a customer is ONLY providing their address in response to your request:\n1. Use intent 'ADDRESS_RESPONSE' instead of 'PLACEORDER'\n2. Set action_required to true\n3. Include the address in extracted_address field\n4. Confirm receipt of the address in response_text\n5. Add create_order: true if this address is for an order that should be created immediately\n6. Include complete order details in action_details:\n   - action_type: 'PLACEORDER'\n   - product_id: The ID of the product to order\n   - quantity: The quantity to order\n\nExample - Address Response with Order (CRITICAL - FOLLOW EXACTLY):\nConversation context: Customer said 'mih muốn đặt 5 chai coca' then you asked for address\nCustomer provides: 'mih ở 77 nguyễn huệ, thành phố huế. sdt của mih là 0327538428'\nYou MUST respond with:\n{\n  \"response_text\": \"Dạ vâng, em đã nhận được địa chỉ giao hàng là 77 Nguyễn Huệ, thành phố Huế và số điện thoại 0327538428. Em đang tiến hành lên đơn 5 chai Coca-Cola giao đến địa chỉ này cho mình nhé.\",\n  \"detected_intent\": \"ADDRESS_RESPONSE\",\n  \"extracted_address\": \"77 nguyễn huệ, thành phố huế\",\n  \"extracted_phone\": \"0327538428\",\n  \"action_required\": true,\n  \"create_order\": true,\n  \"action_details\": {\n    \"action_type\": \"PLACEORDER\",\n    \"product_id\": 1,\n    \"quantity\": 5\n  },\n  \"needs_shop_context\": false\n}\n\nExample - Simple Address Response (No Order):\nIf you asked for address for account update (not for an order) and customer says: 'Tôi ở 45 Lê Lợi, Hà Nội'\nYou MUST respond with:\n{\n  \"response_text\": \"Cảm ơn bạn, mình đã cập nhật địa chỉ: 45 Lê Lợi, Hà Nội vào hồ sơ của bạn!\",\n  \"detected_intent\": \"ADDRESS_RESPONSE\",\n  \"extracted_address\": \"45 Lê Lợi, Hà Nội\",\n  \"action_required\": false,\n  \"create_order\": false\n}\n\nIMAGE FEATURE (For product visuals):\nFor product queries, use these actions to show product images:\n- SENDIMAGE: For multiple product images\n- SHOWPRODUCT: For detailed product information with image\n- Always specify product_id and set send_product_images to true\n- For SENDIMAGE, include product_ids_for_images as array of IDs\n\nRESPONSE QUALITY GUIDELINES (CRITICAL):\n- Never give vague responses - always be specific and helpful\n- Always respond in Vietnamese unless customer uses English\n- Always be natural, never sound robotic or AI-like\n- Use casual language with Vietnamese expressions\n- Be proactive in asking questions to understand needs\n- Show enthusiasm about products and shop\n- Include shop name naturally in conversation\n- For simple greetings, respond warmly and ask how you can help\n- For product inquiries, ask about specific preferences\n- For orders, be thorough while maintaining friendly tone\n\nEXAMPLE DIALOGUES (Model your responses on these):\nExample 1 - Greeting:\nCustomer: 'Chào'\nAssistant: 'Xin chào! Mình là nhân viên tư vấn của Demo SHOP. Mình có thể giúp gì cho bạn hôm nay? Bạn đang tìm kiếm sản phẩm gì vậy?'\n\nExample 2 - Shop Products Question:\nCustomer: 'Shop bán gì vậy?'\nAssistant: 'Dạ shop Demo SHOP chuyên bán các sản phẩm Nước uống ạ. Bạn đang quan tâm đến loại sản phẩm nào?'\n\nExample 3 - Conversation History Question:\nCustomer: 'Tôi hỏi bạn những gì rồi?'\nAssistant: 'Dạ vừa rồi bạn đã hỏi shop mình bán những gì, và mình đã chia sẻ là shop chuyên về các sản phẩm [categories]. Bạn có quan tâm đến sản phẩm cụ thể nào không ạ?'\n\nExample 4 - Product Search:\nCustomer: 'Tôi muốn mua áo khoác'\nAssistant: 'Dạ shop mình có nhiều mẫu áo khoác đẹp lắm ạ. Bạn thích phong cách nào? Áo khoác dù, áo khoác da, hay áo khoác len ấm? Mình có thể tư vấn cụ thể hơn cho bạn.'\n\nExample 5 - Order WITHOUT Address (CRITICAL - Customer address is missing):\nCustomer: 'Tôi muốn mua 2 áo phông size L' (and customer address in database is 'Đang cập nhật')\nResponse: {\n  \"response_text\": \"Dạ vâng, mình hiểu bạn muốn đặt 2 áo phông size L. Để hoàn tất đơn hàng, bạn vui lòng cho mình biết địa chỉ giao hàng là gì nhé?\",\n  \"detected_intent\": \"PLACEORDER\",\n  \"action_required\": false,\n  \"missing_information\": [\"delivery_address\"]\n}\n\nExample 6 - Order with Address:\nCustomer: 'Tôi muốn mua 2 áo phông size L giao đến 25 Nguyễn Thị Minh Khai, Q.1, TP.HCM'\nResponse: {\n  \"response_text\": \"Dạ vâng, mình đã xác nhận đơn hàng 2 áo phông size L. Shop sẽ giao hàng đến địa chỉ 25 Nguyễn Thị Minh Khai, Quận 1, TP.HCM cho bạn nhé!\",\n  \"detected_intent\": \"PLACEORDER\",\n  \"extracted_address\": \"25 Nguyễn Thị Minh Khai, Quận 1, TP.HCM\",\n  \"action_required\": true,\n  \"action_details\": { \"action_type\": \"PLACEORDER\", \"product_id\": 123, \"quantity\": 2 }\n}\n\nRESPONSE FORMAT (Must be valid JSON):\nYour response must be in valid JSON format with these fields:\n1. 'response_text': Your conversational response to customer (ALWAYS REQUIRED)\n2. 'detected_intent': The intent category\n3. 'action_required': Boolean indicating if system action is needed\n4. 'action_details': JSON object with details if action_required is true\n5. 'extracted_address': Any address mentioned by the customer (IMPORTANT FOR ORDERS)\n6. 'extracted_phone': Any phone number mentioned by the customer\n7. 'missing_information': Array of missing data needed\n8. 'follow_up_questions': Array of suggested questions\n9. 'create_order': Boolean indicating if an order should be created (for ADDRESS_RESPONSE intent)\n\nCURRENT CUSTOMER MESSAGE: \"product 3\"\n"}]}],"generationConfig":{"response_mime_type":"application/json","temperature":0.4,"maxOutputTokens":2048,"response_schema":{"type":"OBJECT","required":["response_text","detected_intent","action_required"],"properties":{"response_text":{"type":"STRING","description":"Human-like conversational response in Vietnamese (unless customer used English). Be specific, enthusiastic and helpful, never vague."},"detected_intent":{"type":"STRING","description":"The standardized intent detected from the user message","enum":["GREETING","GETPRODUCT","SEARCHPRODUCT","ADDTOCART","PLACEORDER","CHECKORDER","CANCELORDER","SENDIMAGE","SHOWPRODUCT","CONVERSATION_REFERENCE","ADDRESS_RESPONSE","GENERAL_QUERY"]},"action_required":{"type":"BOOLEAN","description":"Whether the system needs to take an action based on this message"},"extracted_address":{"type":"STRING","description":"Any delivery address mentioned by the customer, in full detail"},"extracted_phone":{"type":"STRING","description":"Any phone number mentioned by the customer"},"action_details":{"type":"OBJECT","description":"Details about the required action, if any","properties":{"action_type":{"type":"STRING","description":"The standardized action code","enum":["GETPRODUCT","SEARCHPRODUCT","ADDTOCART","PLACEORDER","CHECKORDER","CANCELORDER","SENDIMAGE","SHOWPRODUCT","ADDRESS_UPDATE","COMPLETE_ORDER"]},"product_id":{"type":"NUMBER","description":"Product ID for order or product details"},"product_name":{"type":"STRING","description":"Product name for reference"},"quantity":{"type":"NUMBER","description":"Quantity for orders"},"note":{"type":"STRING","description":"Special instructions or notes for orders"},"search_keywords":{"type":"STRING","description":"Keywords for product search"},"order_id":{"type":"STRING","description":"Order ID when referencing a specific order, especially for CANCELORDER intent. Omit for cancelling most recent order."},"send_product_images":{"type":"BOOLEAN","description":"Whether to send product images directly to customer"},"product_ids_for_images":{"type":"ARRAY","description":"List of product IDs to send images for","items":{"type":"NUMBER"}}},"required":["action_type"]},"missing_information":{"type":"ARRAY","description":"List of missing information needed to complete the action","items":{"type":"STRING"}},"follow_up_questions":{"type":"ARRAY","description":"Suggested follow-up questions to maintain conversation flow","items":{"type":"STRING"}}}}}}] as "application/json"
Hibernate: select tw1_0.id,tw1_0.created_at,tw1_0.expected_amount,tw1_0.expires_at,tw1_0.private_key,tw1_0.status,tw1_0.swept,tw1_0.transaction_id,tw1_0.user_id,tw1_0.wallet_address from temporary_wallets tw1_0 where tw1_0.status=?
2025-06-07T21:41:30.776+07:00 DEBUG 5348 --- [nio-8080-exec-3] o.s.web.client.RestTemplate              : Response 200 OK
2025-06-07T21:41:30.776+07:00 DEBUG 5348 --- [nio-8080-exec-3] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as "application/json;charset=UTF-8"
2025-06-07T21:41:30.777+07:00 DEBUG 5348 --- [nio-8080-exec-3] c.g.a.service.impl.ShopAIServiceImpl     : Received intent analysis response from Gemini API: {
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "{\n  \"detected_intent\": \"PLACEORDER\",\n  \"needs_shop_context\": false,\n  \"response_text\": \"Dạ vâng, em đang xử lý đơn hàng của mình ngay đây ạ. Anh/Chị yên tâm nhé!\",\n  \"action_required\": true,\n  \"extracted_address\": \"\",\n  \"extracted_phone\": \"\",\n  \"follow_up_questions\": [\n    \"Anh/Chị có muốn kiểm tra lại thông tin đơn hàng không ạ?\",\n    \"Mình có cần thêm sản phẩm nào khác không ạ?\"\n  ]\n}"
          }
        ],
        "role": "model"
      },
      "finishReason": "STOP",
      "index": 0
    }
  ],
  "usageMetadata": {
    "promptTokenCount": 1388,
    "candidatesTokenCount": 129,
    "totalTokenCount": 1931,
    "promptTokensDetails": [
      {
        "modality": "TEXT",
        "tokenCount": 1388
      }
    ],
    "thoughtsTokenCount": 414
  },
  "modelVersion": "models/gemini-2.5-flash-preview-04-17",
  "responseId": "m09EaM-wMKWh1MkPp_6IgQ4"
}

2025-06-07T21:41:30.777+07:00 DEBUG 5348 --- [nio-8080-exec-3] c.g.a.service.impl.ShopAIServiceImpl     : Parsed intent analysis result from Gemini: {
  "detected_intent": "PLACEORDER",
  "needs_shop_context": false,
  "response_text": "Dạ vâng, em đang xử lý đơn hàng của mình ngay đây ạ. Anh/Chị yên tâm nhé!",
  "action_required": true,
  "extracted_address": "",
  "extracted_phone": "",
  "follow_up_questions": [
    "Anh/Chị có muốn kiểm tra lại thông tin đơn hàng không ạ?",
    "Mình có cần thêm sản phẩm nào khác không ạ?"
  ]
}
2025-06-07T21:41:30.777+07:00  INFO 5348 --- [nio-8080-exec-3] c.g.a.service.impl.ShopAIServiceImpl     : Simple query detected, responding without shop context: PLACEORDER
Hibernate: select fat1_0.id,fat1_0.access_token,fat1_0.is_active,fat1_0.created_at,fat1_0.page_id,fat1_0.shop_id,fat1_0.updated_at,fat1_0.verify_token,fat1_0.webhook_url from facebook_access_tokens fat1_0 where fat1_0.shop_id=? and fat1_0.is_active=?
2025-06-07T21:41:30.780+07:00 DEBUG 5348 --- [nio-8080-exec-3] o.s.web.client.RestTemplate              : HTTP POST https://graph.facebook.com/v18.0/me/messages?access_token=EAAbRsLPbdZBgBO9ZA2HKFDeNRhPIvOWawKgNklNKqYd3RqLgDSsDpP9X5sQOSZAKlvgLZBJ0hCTOeya4N3Kx7mi2BBQVtcmDV5ylAMxFEAEVmdnXTqvOZBCjK3uGrznebWZBwqthmDE6NQZBRw9ZBS8ItYzVyvYOWmk62sgipDO3JNc2XZAPqZAt6UOCBkw1PufZAm1BTjwskTA
2025-06-07T21:41:30.780+07:00 DEBUG 5348 --- [nio-8080-exec-3] o.s.web.client.RestTemplate              : Accept=[text/plain, application/json, application/*+json, */*]
2025-06-07T21:41:30.780+07:00 DEBUG 5348 --- [nio-8080-exec-3] o.s.web.client.RestTemplate              : Writing [{recipient={id=29779345331713148}, message={text=Dạ vâng, em đang xử lý đơn hàng của mình ngay đây ạ. Anh/Chị yên tâm nhé!}}] as "application/json"
2025-06-07T21:41:31.399+07:00 DEBUG 5348 --- [nio-8080-exec-3] o.s.web.client.RestTemplate              : Response 200 OK
2025-06-07T21:41:31.399+07:00 DEBUG 5348 --- [nio-8080-exec-3] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as "application/json"
2025-06-07T21:41:31.399+07:00  INFO 5348 --- [nio-8080-exec-3] c.g.a.s.impl.FacebookBotServiceImpl      : AI detected intent for Shop 7, User 29779345331713148: PLACEORDER
2025-06-07T21:41:31.399+07:00  INFO 5348 --- [nio-8080-exec-3] c.g.a.s.impl.FacebookBotServiceImpl      : AI indicates action required for Shop 7, User 29779345331713148
Hibernate: select s1_0.id,s1_0.name,s1_0.status,s1_0.user_id,u1_0.id,u1_0.balance,u1_0.birthdate,u1_0.fullname,u1_0.is_admin,u1_0.password,u1_0.status,u1_0.username,u1_0.verified from shops s1_0 join users u1_0 on u1_0.id=s1_0.user_id where s1_0.id=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.birthdate,u1_0.fullname,u1_0.is_admin,u1_0.password,u1_0.status,u1_0.username,u1_0.verified from users u1_0 where u1_0.username=?
Hibernate: select s1_0.id,s1_0.name,s1_0.status,s1_0.user_id from shops s1_0 where s1_0.id=? and s1_0.user_id=?
Hibernate: select c1_0.id_customer,c1_0.address,c1_0.created_at,c1_0.email,c1_0.fullname,c1_0.phone,c1_0.id_shop from customers c1_0 left join shops s1_0 on s1_0.id=c1_0.id_shop where s1_0.id=?
Hibernate: select s1_0.id,s1_0.name,s1_0.status,s1_0.user_id,u1_0.id,u1_0.balance,u1_0.birthdate,u1_0.fullname,u1_0.is_admin,u1_0.password,u1_0.status,u1_0.username,u1_0.verified from shops s1_0 join users u1_0 on u1_0.id=s1_0.user_id where s1_0.id=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.birthdate,u1_0.fullname,u1_0.is_admin,u1_0.password,u1_0.status,u1_0.username,u1_0.verified from users u1_0 where u1_0.username=?
Hibernate: select s1_0.id,s1_0.name,s1_0.status,s1_0.user_id from shops s1_0 where s1_0.id=? and s1_0.user_id=?
Hibernate: select c1_0.id_customer,c1_0.address,c1_0.created_at,c1_0.email,c1_0.fullname,c1_0.phone,c1_0.id_shop from customers c1_0 left join shops s1_0 on s1_0.id=c1_0.id_shop where s1_0.id=?
2025-06-07T21:41:34.635+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Response 200 OK
2025-06-07T21:41:34.635+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as "application/json;charset=UTF-8"
2025-06-07T21:41:34.636+07:00 DEBUG 5348 --- [nio-8080-exec-2] c.g.a.service.impl.ShopAIServiceImpl     : Received response from Gemini API: {
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "{\n  \"action_required\": true,\n  \"detected_intent\": \"SHOWPRODUCT\",\n  \"response_text\": \"Dạ vâng, bạn đang hỏi về sản phẩm Cocacola (ID 3) đúng không ạ? Sản phẩm này là nước uống có ga, giá 100.000đ. Bạn có muốn xem hình ảnh của sản phẩm này không?\",\n  \"action_details\": {\n    \"action_type\": \"SHOWPRODUCT\",\n    \"product_id\": 3,\n    \"send_product_images\": true\n  },\n  \"extracted_address\": \"\",\n  \"extracted_phone\": \"\",\n  \"follow_up_questions\": [\n    \"Bạn có muốn đặt mua sản phẩm này không?\",\n    \"Bạn có quan tâm đến sản phẩm nào khác không?\"\n  ],\n  \"missing_information\": []\n}"
          }
        ],
        "role": "model"
      },
      "finishReason": "STOP",
      "index": 0
    }
  ],
  "usageMetadata": {
    "promptTokenCount": 3640,
    "candidatesTokenCount": 191,
    "totalTokenCount": 4606,
    "promptTokensDetails": [
      {
        "modality": "TEXT",
        "tokenCount": 3640
      }
    ],
    "thoughtsTokenCount": 775
  },
  "modelVersion": "models/gemini-2.5-flash-preview-04-17",
  "responseId": "n09EaKmlJ72i1MkPwbP9gAQ"
}

2025-06-07T21:41:34.636+07:00 DEBUG 5348 --- [nio-8080-exec-2] c.g.a.service.impl.ShopAIServiceImpl     : Parsed result from Gemini: {
  "action_required": true,
  "detected_intent": "SHOWPRODUCT",
  "response_text": "Dạ vâng, bạn đang hỏi về sản phẩm Cocacola (ID 3) đúng không ạ? Sản phẩm này là nước uống có ga, giá 100.000đ. Bạn có muốn xem hình ảnh của sản phẩm này không?",
  "action_details": {
    "action_type": "SHOWPRODUCT",
    "product_id": 3,
    "send_product_images": true
  },
  "extracted_address": "",
  "extracted_phone": "",
  "follow_up_questions": [
    "Bạn có muốn đặt mua sản phẩm này không?",
    "Bạn có quan tâm đến sản phẩm nào khác không?"
  ],
  "missing_information": []
}
2025-06-07T21:41:34.637+07:00 ERROR 5348 --- [nio-8080-exec-2] c.g.a.s.impl.FacebookBotServiceImpl      : AI called PLACEORDER without customer address for user 29779345331713148 - this should not happen
Hibernate: select fat1_0.id,fat1_0.access_token,fat1_0.is_active,fat1_0.created_at,fat1_0.page_id,fat1_0.shop_id,fat1_0.updated_at,fat1_0.verify_token,fat1_0.webhook_url from facebook_access_tokens fat1_0 where fat1_0.shop_id=? and fat1_0.is_active=?
2025-06-07T21:41:34.642+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : HTTP POST https://graph.facebook.com/v18.0/me/messages?access_token=EAAbRsLPbdZBgBO9ZA2HKFDeNRhPIvOWawKgNklNKqYd3RqLgDSsDpP9X5sQOSZAKlvgLZBJ0hCTOeya4N3Kx7mi2BBQVtcmDV5ylAMxFEAEVmdnXTqvOZBCjK3uGrznebWZBwqthmDE6NQZBRw9ZBS8ItYzVyvYOWmk62sgipDO3JNc2XZAPqZAt6UOCBkw1PufZAm1BTjwskTA
2025-06-07T21:41:34.643+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Accept=[text/plain, application/json, application/*+json, */*]
2025-06-07T21:41:34.643+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Writing [{recipient={id=29779345331713148}, message={text=Xin lỗi, có lỗi trong việc xử lý đơn hàng. AI cần thu thập địa chỉ trước khi tạo đơn.}}] as "application/json"
2025-06-07T21:41:35.340+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Response 200 OK
2025-06-07T21:41:35.340+07:00 DEBUG 5348 --- [nio-8080-exec-2] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as "application/json"
Hibernate: select o1_0.id_order,o1_0.created_at,o1_0.id_customer,o1_0.delivery_unit,o1_0.note,o1_0.id_product,o1_0.quantity,o1_0.status from orders o1_0 join customers c1_0 on c1_0.id_customer=o1_0.id_customer where c1_0.id_shop=?
Hibernate: select c1_0.id_customer,c1_0.address,c1_0.created_at,c1_0.email,c1_0.fullname,c1_0.phone,c1_0.id_shop,s1_0.id,s1_0.name,s1_0.status,s1_0.user_id,u1_0.id,u1_0.balance,u1_0.birthdate,u1_0.fullname,u1_0.is_admin,u1_0.password,u1_0.status,u1_0.username,u1_0.verified from customers c1_0 join shops s1_0 on s1_0.id=c1_0.id_shop left join users u1_0 on u1_0.id=s1_0.user_id where c1_0.id_customer=?
Hibernate: select p1_0.id,p1_0.active,p1_0.category,p1_0.created_at,p1_0.description,p1_0.image_base64,p1_0.name,p1_0.price,p1_0.shop_id,p1_0.stock,p1_0.updated_at from products p1_0 where p1_0.id=?
Hibernate: select tw1_0.id,tw1_0.created_at,tw1_0.expected_amount,tw1_0.expires_at,tw1_0.private_key,tw1_0.status,tw1_0.swept,tw1_0.transaction_id,tw1_0.user_id,tw1_0.wallet_address from temporary_wallets tw1_0 where tw1_0.status=?
Hibernate: select tw1_0.id,tw1_0.created_at,tw1_0.expected_amount,tw1_0.expires_at,tw1_0.private_key,tw1_0.status,tw1_0.swept,tw1_0.transaction_id,tw1_0.user_id,tw1_0.wallet_address from temporary_wallets tw1_0 where tw1_0.status=?
Hibernate: select tw1_0.id,tw1_0.created_at,tw1_0.expected_amount,tw1_0.expires_at,tw1_0.private_key,tw1_0.status,tw1_0.swept,tw1_0.transaction_id,tw1_0.user_id,tw1_0.wallet_address from temporary_wallets tw1_0 where tw1_0.status=?
2025-06-07T21:42:16.696+07:00  INFO 5348 --- [   scheduling-1] c.g.a.service.impl.Web3ServiceImpl       : Processing pending sweeps
Hibernate: select tw1_0.id,tw1_0.created_at,tw1_0.expected_amount,tw1_0.expires_at,tw1_0.private_key,tw1_0.status,tw1_0.swept,tw1_0.transaction_id,tw1_0.user_id,tw1_0.wallet_address from temporary_wallets tw1_0 where tw1_0.status=? and not(tw1_0.swept)
Hibernate: select tw1_0.id,tw1_0.created_at,tw1_0.expected_amount,tw1_0.expires_at,tw1_0.private_key,tw1_0.status,tw1_0.swept,tw1_0.transaction_id,tw1_0.user_id,tw1_0.wallet_address from temporary_wallets tw1_0 where tw1_0.status=?
Hibernate: select tw1_0.id,tw1_0.created_at,tw1_0.expected_amount,tw1_0.expires_at,tw1_0.private_key,tw1_0.status,tw1_0.swept,tw1_0.transaction_id,tw1_0.user_id,tw1_0.wallet_address from temporary_wallets tw1_0 where tw1_0.status=?
Hibernate: select tw1_0.id,tw1_0.created_at,tw1_0.expected_amount,tw1_0.expires_at,tw1_0.private_key,tw1_0.status,tw1_0.swept,tw1_0.transaction_id,tw1_0.user_id,tw1_0.wallet_address from temporary_wallets tw1_0 where tw1_0.status=?
Hibernate: select tw1_0.id,tw1_0.created_at,tw1_0.expected_amount,tw1_0.expires_at,tw1_0.private_key,tw1_0.status,tw1_0.swept,tw1_0.transaction_id,tw1_0.user_id,tw1_0.wallet_address from temporary_wallets tw1_0 where tw1_0.status=?
2025-06-07T21:43:16.714+07:00  INFO 5348 --- [   scheduling-1] c.g.a.service.impl.Web3ServiceImpl       : Processing pending sweeps
Hibernate: select tw1_0.id,tw1_0.created_at,tw1_0.expected_amount,tw1_0.expires_at,tw1_0.private_key,tw1_0.status,tw1_0.swept,tw1_0.transaction_id,tw1_0.user_id,tw1_0.wallet_address from temporary_wallets tw1_0 where tw1_0.status=? and not(tw1_0.swept)
