Hibernate: select u1_0.id,u1_0.balance,u1_0.birthdate,u1_0.fullname,u1_0.is_admin,u1_0.password,u1_0.status,u1_0.username,u1_0.verified from users u1_0 where u1_0.username=?
Hibernate: select s1_0.id,s1_0.name,s1_0.status,s1_0.user_id from shops s1_0 where s1_0.id=? and s1_0.user_id=?
Hibernate: select c1_0.id_customer,c1_0.address,c1_0.created_at,c1_0.email,c1_0.fullname,c1_0.phone,c1_0.id_shop from customers c1_0 left join shops s1_0 on s1_0.id=c1_0.id_shop where s1_0.id=?
2025-06-03T09:01:39.778+07:00 DEBUG 9588 --- [legram Executor] o.s.web.client.RestTemplate              : Response 200 OK
2025-06-03T09:01:39.778+07:00 DEBUG 9588 --- [legram Executor] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as "application/json;charset=UTF-8"
2025-06-03T09:01:39.852+07:00 DEBUG 9588 --- [legram Executor] c.g.a.service.impl.ShopAIServiceImpl     : Received intent analysis response from Gemini API: {
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "{\n  \"detected_intent\": \"ADDRESS_RESPONSE\",\n  \"needs_shop_context\": false,\n  \"response_text\": \"Dạ vâng, em đã nhận được địa chỉ giao hàng là 77 Nguyễn Huệ, thành phố Huế và số điện thoại 0327538428 của mình rồi ạ. Em đang tiến hành lên đơn 5 chai Coca-Cola giao đến địa chỉ này cho mình nhé.\",\n  \"action_required\": true,\n  \"extracted_address\": \"77 nguyễn huệ, thành phố huế\",\n  \"extracted_phone\": \"0327538428\",\n  \"follow_up_questions\": []\n}"
          }
        ],
        "role": "model"
      },
      "finishReason": "STOP",
      "index": 0
    }
  ],
  "usageMetadata": {
    "promptTokenCount": 1010,
    "candidatesTokenCount": 157,
    "totalTokenCount": 2360,
    "promptTokensDetails": [
      {
        "modality": "TEXT",
        "tokenCount": 1010
      }
    ],
    "thoughtsTokenCount": 1193
  },
  "modelVersion": "models/gemini-2.5-flash-preview-04-17",
  "responseId": "glc-aPe0GYbB1MkPlJejsAM"
}

2025-06-03T09:01:39.852+07:00 DEBUG 9588 --- [legram Executor] c.g.a.service.impl.ShopAIServiceImpl     : Parsed intent analysis result from Gemini: {
  "detected_intent": "ADDRESS_RESPONSE",
  "needs_shop_context": false,
  "response_text": "Dạ vâng, em đã nhận được địa chỉ giao hàng là 77 Nguyễn Huệ, thành phố Huế và số điện thoại 0327538428 của mình rồi ạ. Em đang tiến hành lên đơn 5 chai Coca-Cola giao đến địa chỉ này cho mình nhé.",
  "action_required": true,
  "extracted_address": "77 nguyễn huệ, thành phố huế",
  "extracted_phone": "0327538428",
  "follow_up_questions": []
}
2025-06-03T09:01:39.852+07:00  INFO 9588 --- [legram Executor] c.g.a.service.impl.ShopAIServiceImpl     : AI extracted address: 77 nguyễn huệ, thành phố huế
2025-06-03T09:01:39.853+07:00  INFO 9588 --- [legram Executor] c.g.a.service.impl.ShopAIServiceImpl     : AI extracted phone: 0327538428
Hibernate: select c1_0.id_customer,c1_0.address,c1_0.created_at,c1_0.email,c1_0.fullname,c1_0.phone,c1_0.id_shop,s1_0.id,s1_0.name,s1_0.status,s1_0.user_id,u1_0.id,u1_0.balance,u1_0.birthdate,u1_0.fullname,u1_0.is_admin,u1_0.password,u1_0.status,u1_0.username,u1_0.verified from customers c1_0 join shops s1_0 on s1_0.id=c1_0.id_shop left join users u1_0 on u1_0.id=s1_0.user_id where c1_0.id_customer=?
Hibernate: update customers set address=?,created_at=?,email=?,fullname=?,phone=?,id_shop=? where id_customer=?
2025-06-03T09:01:39.870+07:00  INFO 9588 --- [legram Executor] c.g.a.service.impl.ShopAIServiceImpl     : Updated customer with AI extracted information: {address=77 nguyễn huệ, thành phố huế}
2025-06-03T09:01:39.871+07:00  INFO 9588 --- [legram Executor] c.g.a.service.impl.ShopAIServiceImpl     : Processing address response with potential order creation
2025-06-03T09:01:39.871+07:00  INFO 9588 --- [legram Executor] c.g.a.service.impl.ShopAIServiceImpl     : Returning address response without further processing
2025-06-03T09:01:40.413+07:00  INFO 9588 --- [legram Executor] c.g.assistant.telegram.ShopTelegramBot   : AI detected intent for Shop 1, User 7090029371: ADDRESS_RESPONSE
2025-06-03T09:01:40.414+07:00  INFO 9588 --- [legram Executor] c.g.assistant.telegram.ShopTelegramBot   : AI indicates action required for Shop 1, User 7090029371
Hibernate: select o1_0.id_order,o1_0.created_at,o1_0.id_customer,o1_0.delivery_unit,o1_0.note,o1_0.id_product,o1_0.quantity,o1_0.status from orders o1_0 join customers c1_0 on c1_0.id_customer=o1_0.id_customer where c1_0.id_shop=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.birthdate,u1_0.fullname,u1_0.is_admin,u1_0.password,u1_0.status,u1_0.username,u1_0.verified from users u1_0 where u1_0.username=?
Hibernate: select s1_0.id,s1_0.name,s1_0.status,s1_0.user_id from shops s1_0 where s1_0.id=? and s1_0.user_id=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.birthdate,u1_0.fullname,u1_0.is_admin,u1_0.password,u1_0.status,u1_0.username,u1_0.verified from users u1_0 where u1_0.username=?
Hibernate: select s1_0.id,s1_0.name,s1_0.status,s1_0.user_id,u1_0.id,u1_0.balance,u1_0.birthdate,u1_0.fullname,u1_0.is_admin,u1_0.password,u1_0.status,u1_0.username,u1_0.verified from shops s1_0 join users u1_0 on u1_0.id=s1_0.user_id where s1_0.id=?
Hibernate: select s1_0.id,s1_0.name,s1_0.status,s1_0.user_id from shops s1_0 where s1_0.id=? and s1_0.user_id=?
Hibernate: select c1_0.id_customer,c1_0.address,c1_0.created_at,c1_0.email,c1_0.fullname,c1_0.phone,c1_0.id_shop from customers c1_0 left join shops s1_0 on s1_0.id=c1_0.id_shop where s1_0.id=?
Hibernate: select o1_0.id_order,o1_0.created_at,o1_0.id_customer,o1_0.delivery_unit,o1_0.note,o1_0.id_product,o1_0.quantity,o1_0.status from orders o1_0 join customers c1_0 on c1_0.id_customer=o1_0.id_customer where c1_0.id_shop=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.birthdate,u1_0.fullname,u1_0.is_admin,u1_0.password,u1_0.status,u1_0.username,u1_0.verified from users u1_0 where u1_0.username=?
Hibernate: select s1_0.id,s1_0.name,s1_0.status,s1_0.user_id from shops s1_0 where s1_0.id=? and s1_0.user_id=?
Hibernate: select u1_0.id,u1_0.balance,u1_0.birthdate,u1_0.fullname,u1_0.is_admin,u1_0.password,u1_0.status,u1_0.username,u1_0.verified from users u1_0 where u1_0.username=?
Hibernate: select s1_0.id,s1_0.name,s1_0.status,s1_0.user_id,u1_0.id,u1_0.balance,u1_0.birthdate,u1_0.fullname,u1_0.is_admin,u1_0.password,u1_0.status,u1_0.username,u1_0.verified from shops s1_0 join users u1_0 on u1_0.id=s1_0.user_id where s1_0.id=?
Hibernate: select s1_0.id,s1_0.name,s1_0.status,s1_0.user_id from shops s1_0 where s1_0.id=? and s1_0.user_id=?
Hibernate: select c1_0.id_customer,c1_0.address,c1_0.created_at,c1_0.email,c1_0.fullname,c1_0.phone,c1_0.id_shop from customers c1_0 left join shops s1_0 on s1_0.id=c1_0.id_shop where s1_0.id=?
Hibernate: select tw1_0.id,tw1_0.created_at,tw1_0.expected_amount,tw1_0.expires_at,tw1_0.private_key,tw1_0.status,tw1_0.swept,tw1_0.transaction_id,tw1_0.user_id,tw1_0.wallet_address from temporary_wallets tw1_0 where tw1_0.status=?
2025-06-03T09:01:50.260+07:00  INFO 9588 --- [   scheduling-1] c.g.a.service.impl.Web3ServiceImpl       : Processing pending sweeps
Hibernate: select tw1_0.id,tw1_0.created_at,tw1_0.expected_amount,tw1_0.expires_at,tw1_0.private_key,tw1_0.status,tw1_0.swept,tw1_0.transaction_id,tw1_0.user_id,tw1_0.wallet_address from temporary_wallets tw1_0 where tw1_0.status=? and not(tw1_0.swept)
2025-06-03T09:01:51.456+07:00  INFO 9588 --- [legram Executor] c.g.assistant.telegram.ShopTelegramBot   : Received message from Telegram - Shop ID: 1, Chat ID: 7090029371
Hibernate: insert into telegram_messages (chat_id,file_type,file_url,message_text,processed,received_at,shop_id,user_id,username) values (?,?,?,?,?,?,?,?,?)
2025-06-03T09:01:51.464+07:00  INFO 9588 --- [legram Executor] c.g.assistant.telegram.ShopTelegramBot   : Stored Telegram message - Shop ID: 1, Message: cảm ơn bạn nha
Hibernate: select c1_0.id_customer,c1_0.address,c1_0.created_at,c1_0.email,c1_0.fullname,c1_0.phone,c1_0.id_shop from customers c1_0 left join shops s1_0 on s1_0.id=c1_0.id_shop where c1_0.email=? and s1_0.id=?
Hibernate: select s1_0.id,s1_0.name,s1_0.status,s1_0.user_id,u1_0.id,u1_0.balance,u1_0.birthdate,u1_0.fullname,u1_0.is_admin,u1_0.password,u1_0.status,u1_0.username,u1_0.verified from shops s1_0 join users u1_0 on u1_0.id=s1_0.user_id where s1_0.id=?
2025-06-03T09:01:51.469+07:00 DEBUG 9588 --- [legram Executor] c.g.a.service.impl.ShopAIServiceImpl     : Sending intent analysis request to Gemini API: {"contents":[{"parts":[{"text":"Recent conversation history:\nCustomer: XIN CHÀO\nCustomer: mih muốn đặt 5 chai coca\nAssistant: Dạ vâng, mình hiểu bạn taonesnkaja muốn đặt 5 chai Cocacola. Để hoàn tất đơn hàng, bạn vui lòng cho mình biết địa chỉ giao hàng là gì nhé?\nCustomer: mih ở 77 nguyễn huệ, thành phố huế. sdt của mih là 0327538428\nCustomer: cảm ơn bạn nha\n\nYou are a shop assistant. Analyze this customer message in context of any previous conversation: \"cảm ơn bạn nha\"\n\nDetermine the intent and whether shop product context is needed to properly respond.\n\nIMPORTANT: If this message is ONLY providing an address in response to a previous question, set the detected_intent to 'ADDRESS_RESPONSE' instead of 'PLACEORDER'. When the intent is ADDRESS_RESPONSE, set action_required to true and create_order to true.\n\nIf you previously asked the customer for an address for an order, include these order details in the response:\n1. Set create_order: true\n2. Include full action_details with action_type: 'PLACEORDER', product_id and quantity\n3. Extract any product mention and quantities from previous messages\n\nIMPORTANT: Standard action codes to use:\n- GREETING: Simple greeting or welcome message\n- GETPRODUCT: Get detailed information about a specific product\n- SEARCHPRODUCT: Search for products matching keywords\n- ADDTOCART: Add a product to the customer's cart\n- PLACEORDER: Complete the order process\n- CHECKORDER: Check order status\n- CANCELORDER: Cancel an existing order\n- SENDIMAGE: Send product images directly to customer\n- SHOWPRODUCT: Show product details with image\n- CONVERSATION_REFERENCE: Customer is asking about previous conversation\n- ADDRESS_RESPONSE: Customer is providing their address in response to a request\n- GENERAL_QUERY: General question not fitting other categories\n\nIMPORTANT CANCELORDER DETECTION GUIDELINES:\n1. Use CANCELORDER intent when messages include phrases like:\n   - 'hủy đơn hàng', 'hủy đơn', 'không mua nữa'\n   - 'huỷ giao dịch', 'không đặt hàng nữa', 'không muốn mua nữa'\n   - 'cancel order', 'cancel my order', 'don't want to buy anymore'\n2. If the customer mentions a specific order ID ('đơn hàng số X', 'mã đơn hàng X'):\n   - Include the 'order_id' field with the exact order number\n3. If no order ID is mentioned, do NOT include the 'order_id' field\n4. Set action_required: true for all cancellation requests\n5. Always provide a clear confirmation in response_text\n\nIMPORTANT ADDRESS_RESPONSE GUIDELINES:\n1. When customer is providing ONLY an address after you requested it:\n   - Set detected_intent: 'ADDRESS_RESPONSE'\n   - Set action_required: true\n   - Set create_order: true if this address is for an order\n   - Include extracted_address with the full address\n   - If this is for an order, include action_details with product_id and quantity\n2. Examples of address-only responses:\n   - 'Địa chỉ của tôi là 123 Đường ABC'\n   - 'Giao đến 72 Hương An, Huế nhé'\n   - 'Nhà mình ở số 45 đường Trần Hưng Đạo'\n\nIMPORTANT: When customer asks about product images or product details, always prefer to use:\nIMPORTANT: When customer asks about product images or product details, always prefer to use:\n- SENDIMAGE: For sending multiple product images directly\n- SHOWPRODUCT: For showing detailed product information with image\n\nIMPORTANT: When customer asks about previous messages or what they asked before, use CONVERSATION_REFERENCE\n\nIMPORTANT: Always look for and extract delivery information when customer may provide it:\n1. Look for addresses: Any text related to addresses, delivery locations, house numbers, streets, etc.\n2. Look for phone numbers: Vietnamese phone numbers in formats like 0912345678, +84912345678, etc.\n3. Include the extracted information in extracted_address and extracted_phone fields.\n\nIMPORTANT: Keep your response_text short, natural, conversational, and human-like. Always respond in Vietnamese unless the customer uses English. Act like a friendly shop assistant, not an AI. Use casual language with appropriate Vietnamese expressions. For simple greetings like 'hello', 'hi', etc., just respond with a friendly greeting. Avoid lengthy, formal responses.\n\n"}]}],"generationConfig":{"response_mime_type":"application/json","temperature":0.3,"response_schema":{"type":"OBJECT","required":["response_text","detected_intent","needs_shop_context"],"properties":{"response_text":{"type":"STRING"},"detected_intent":{"type":"STRING","enum":["GREETING","GETPRODUCT","SEARCHPRODUCT","ADDTOCART","PLACEORDER","CHECKORDER","CANCELORDER","SENDIMAGE","SHOWPRODUCT","CONVERSATION_REFERENCE","ADDRESS_RESPONSE","GENERAL_QUERY"]},"needs_shop_context":{"type":"BOOLEAN"},"action_required":{"type":"BOOLEAN"},"extracted_address":{"type":"STRING","description":"Address extracted from the customer message, if any"},"extracted_phone":{"type":"STRING","description":"Phone number extracted from the customer message, if any"},"follow_up_questions":{"type":"ARRAY","description":"Suggested follow-up questions to maintain conversation flow","items":{"type":"STRING"}}}}}}
2025-06-03T09:01:51.469+07:00 DEBUG 9588 --- [legram Executor] o.s.web.client.RestTemplate              : HTTP POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-04-17:generateContent?key=AIzaSyB1EYnFlDSgFhqv3Kk4FDv1ukZvl4H7wBY
2025-06-03T09:01:51.469+07:00 DEBUG 9588 --- [legram Executor] o.s.web.client.RestTemplate              : Accept=[text/plain, application/json, application/*+json, */*]
2025-06-03T09:01:51.470+07:00 DEBUG 9588 --- [legram Executor] o.s.web.client.RestTemplate              : Writing [{"contents":[{"parts":[{"text":"Recent conversation history:\nCustomer: XIN CHÀO\nCustomer: mih muốn đặt 5 chai coca\nAssistant: Dạ vâng, mình hiểu bạn taonesnkaja muốn đặt 5 chai Cocacola. Để hoàn tất đơn hàng, bạn vui lòng cho mình biết địa chỉ giao hàng là gì nhé?\nCustomer: mih ở 77 nguyễn huệ, thành phố huế. sdt của mih là 0327538428\nCustomer: cảm ơn bạn nha\n\nYou are a shop assistant. Analyze this customer message in context of any previous conversation: \"cảm ơn bạn nha\"\n\nDetermine the intent and whether shop product context is needed to properly respond.\n\nIMPORTANT: If this message is ONLY providing an address in response to a previous question, set the detected_intent to 'ADDRESS_RESPONSE' instead of 'PLACEORDER'. When the intent is ADDRESS_RESPONSE, set action_required to true and create_order to true.\n\nIf you previously asked the customer for an address for an order, include these order details in the response:\n1. Set create_order: true\n2. Include full action_details with action_type: 'PLACEORDER', product_id and quantity\n3. Extract any product mention and quantities from previous messages\n\nIMPORTANT: Standard action codes to use:\n- GREETING: Simple greeting or welcome message\n- GETPRODUCT: Get detailed information about a specific product\n- SEARCHPRODUCT: Search for products matching keywords\n- ADDTOCART: Add a product to the customer's cart\n- PLACEORDER: Complete the order process\n- CHECKORDER: Check order status\n- CANCELORDER: Cancel an existing order\n- SENDIMAGE: Send product images directly to customer\n- SHOWPRODUCT: Show product details with image\n- CONVERSATION_REFERENCE: Customer is asking about previous conversation\n- ADDRESS_RESPONSE: Customer is providing their address in response to a request\n- GENERAL_QUERY: General question not fitting other categories\n\nIMPORTANT CANCELORDER DETECTION GUIDELINES:\n1. Use CANCELORDER intent when messages include phrases like:\n   - 'hủy đơn hàng', 'hủy đơn', 'không mua nữa'\n   - 'huỷ giao dịch', 'không đặt hàng nữa', 'không muốn mua nữa'\n   - 'cancel order', 'cancel my order', 'don't want to buy anymore'\n2. If the customer mentions a specific order ID ('đơn hàng số X', 'mã đơn hàng X'):\n   - Include the 'order_id' field with the exact order number\n3. If no order ID is mentioned, do NOT include the 'order_id' field\n4. Set action_required: true for all cancellation requests\n5. Always provide a clear confirmation in response_text\n\nIMPORTANT ADDRESS_RESPONSE GUIDELINES:\n1. When customer is providing ONLY an address after you requested it:\n   - Set detected_intent: 'ADDRESS_RESPONSE'\n   - Set action_required: true\n   - Set create_order: true if this address is for an order\n   - Include extracted_address with the full address\n   - If this is for an order, include action_details with product_id and quantity\n2. Examples of address-only responses:\n   - 'Địa chỉ của tôi là 123 Đường ABC'\n   - 'Giao đến 72 Hương An, Huế nhé'\n   - 'Nhà mình ở số 45 đường Trần Hưng Đạo'\n\nIMPORTANT: When customer asks about product images or product details, always prefer to use:\nIMPORTANT: When customer asks about product images or product details, always prefer to use:\n- SENDIMAGE: For sending multiple product images directly\n- SHOWPRODUCT: For showing detailed product information with image\n\nIMPORTANT: When customer asks about previous messages or what they asked before, use CONVERSATION_REFERENCE\n\nIMPORTANT: Always look for and extract delivery information when customer may provide it:\n1. Look for addresses: Any text related to addresses, delivery locations, house numbers, streets, etc.\n2. Look for phone numbers: Vietnamese phone numbers in formats like 0912345678, +84912345678, etc.\n3. Include the extracted information in extracted_address and extracted_phone fields.\n\nIMPORTANT: Keep your response_text short, natural, conversational, and human-like. Always respond in Vietnamese unless the customer uses English. Act like a friendly shop assistant, not an AI. Use casual language with appropriate Vietnamese expressions. For simple greetings like 'hello', 'hi', etc., just respond with a friendly greeting. Avoid lengthy, formal responses.\n\n"}]}],"generationConfig":{"response_mime_type":"application/json","temperature":0.3,"response_schema":{"type":"OBJECT","required":["response_text","detected_intent","needs_shop_context"],"properties":{"response_text":{"type":"STRING"},"detected_intent":{"type":"STRING","enum":["GREETING","GETPRODUCT","SEARCHPRODUCT","ADDTOCART","PLACEORDER","CHECKORDER","CANCELORDER","SENDIMAGE","SHOWPRODUCT","CONVERSATION_REFERENCE","ADDRESS_RESPONSE","GENERAL_QUERY"]},"needs_shop_context":{"type":"BOOLEAN"},"action_required":{"type":"BOOLEAN"},"extracted_address":{"type":"STRING","description":"Address extracted from the customer message, if any"},"extracted_phone":{"type":"STRING","description":"Phone number extracted from the customer message, if any"},"follow_up_questions":{"type":"ARRAY","description":"Suggested follow-up questions to maintain conversation flow","items":{"type":"STRING"}}}}}}] as "application/json"
2025-06-03T09:01:54.628+07:00 DEBUG 9588 --- [legram Executor] o.s.web.client.RestTemplate              : Response 200 OK
2025-06-03T09:01:54.629+07:00 DEBUG 9588 --- [legram Executor] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as "application/json;charset=UTF-8"
2025-06-03T09:01:54.629+07:00 DEBUG 9588 --- [legram Executor] c.g.a.service.impl.ShopAIServiceImpl     : Received intent analysis response from Gemini API: {
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "{\n  \"detected_intent\": \"GENERAL_QUERY\",\n  \"needs_shop_context\": false,\n  \"response_text\": \"Dạ không có gì ạ! Cảm ơn bạn đã đặt hàng.\",\n  \"action_required\": false,\n  \"extracted_address\": \"\",\n  \"extracted_phone\": \"\",\n  \"follow_up_questions\": [\n    \"Bạn có cần mình hỗ trợ gì thêm không ạ?\",\n    \"Bạn có muốn xem thêm sản phẩm khác không?\"\n  ]\n}"
          }
        ],
        "role": "model"
      },
      "finishReason": "STOP",
      "index": 0
    }
  ],
  "usageMetadata": {
    "promptTokenCount": 990,
    "candidatesTokenCount": 114,
    "totalTokenCount": 1460,
    "promptTokensDetails": [
      {
        "modality": "TEXT",
        "tokenCount": 990
      }
    ],
    "thoughtsTokenCount": 356
  },
  "modelVersion": "models/gemini-2.5-flash-preview-04-17",
  "responseId": "kVc-aK2FEd2p1MkPzpDjsQc"
}

2025-06-03T09:01:54.630+07:00 DEBUG 9588 --- [legram Executor] c.g.a.service.impl.ShopAIServiceImpl     : Parsed intent analysis result from Gemini: {
  "detected_intent": "GENERAL_QUERY",
  "needs_shop_context": false,
  "response_text": "Dạ không có gì ạ! Cảm ơn bạn đã đặt hàng.",
  "action_required": false,
  "extracted_address": "",
  "extracted_phone": "",
  "follow_up_questions": [
    "Bạn có cần mình hỗ trợ gì thêm không ạ?",
    "Bạn có muốn xem thêm sản phẩm khác không?"
  ]
}